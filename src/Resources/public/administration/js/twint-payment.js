(function(){var e,t,n,i,r,a,o,s,l={423:function(){},52:function(){},616:function(){},711:function(e,t,n){Shopware.Component.register("twint-payment-plugin-icon",()=>n.e(118).then(n.bind(n,118))),Shopware.Component.register("twint-settings",()=>n.e(863).then(n.bind(n,863))),Shopware.Component.register("express-settings",()=>n.e(423).then(n.bind(n,518))),Shopware.Module.register("twint-payment",{type:"plugin",name:"TwintPayment",title:"twint.title",version:"1.0.0",targetVersion:"1.0.0",icon:"regular-cog",routeMiddleware(e,t){e(t)},routes:{index:{component:"twint-settings",path:"index",meta:{parentPath:"sw.settings.index.plugins"}},express:{component:"express-settings",path:"express",meta:{parentPath:"sw.settings.index.plugins"}}},settingsItem:[{name:"twint-payment-express",to:"twint.payment.express",label:"twint.express.menuItem",group:"plugins",iconComponent:"twint-payment-plugin-icon",backgroundEnabled:!1},{name:"twint-payment",to:"twint.payment.index",label:"twint.general.menuItem",group:"plugins",iconComponent:"twint-payment-plugin-icon",backgroundEnabled:!1}]})},370:function(){let{Component:e,Mixin:t}=Shopware;e.override("sw-file-input",{methods:{setSelectedFile(e){this.selectedFile=e,this.$emit("update:value",this.selectedFile),this.$emit("change",this.selectedFile)}}})},387:function(){let{Criteria:e}=Shopware.Data;Shopware.Component.override("sw-order-create-options",{computed:{paymentMethodCriteria(){let t=new e;return t.addFilter(e.equals("active",1)),this.salesChannelId&&t.addFilter(e.equals("salesChannels.id",this.salesChannelId)),t.addFilter(e.not("AND",[e.contains("handlerIdentifier","Twint")])),t}}})},42:function(){let{Criteria:e}=Shopware.Data;Shopware.Component.override("sw-order-detail-details",{inject:["repositoryFactory","acl"],data(){return{twintCustomFieldSetName:"twint_payment_custom_field_set"}},methods:{createdComponent(){this.$super("createdComponent")}},computed:{customFieldSetCriteria(){let t=new e(1,null);return t.addFilter(e.not("AND",[e.equals("name",this.twintCustomFieldSetName)])),t.addFilter(e.equals("relations.entityName","order")),t}}})},163:function(){let{Criteria:e}=Shopware.Data;Shopware.Component.override("sw-settings-custom-field-set-list",{inject:["acl","feature"],data(){return{twintCustomFieldSetName:"twint_payment_custom_field_set"}},computed:{listingCriteria(){let t=new e(this.page,this.limit),n=this.getMainListingParams();return t.addFilter(e.multi("OR",[...this.getLocaleCriterias(n.term),...this.getTermCriteria(n.term)])),t.addFilter(e.equals("appId",null)),t.addFilter(e.not("AND",[e.equals("name",this.twintCustomFieldSetName)])),t}}})},467:function(){let{Component:e,Mixin:t}=Shopware;e.extend("twint-store-uuid","sw-text-field",{mixins:[t.getByName("notification")],methods:{onChange(e){this.$super("onChange",e),this.isValidUUIDv4(e.target.value)||this.createNotificationError({title:this.$tc("twint.settings.storeUuid.error.title"),message:this.$tc("twint.settings.storeUuid.error.invalidFormat")})},isValidUUIDv4(e){return/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(e)}}})},235:function(e,t,n){var i=n(423);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),n(346).Z("2d9d6b0c",i,!0,{})},905:function(e,t,n){var i=n(52);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),n(346).Z("b343ab88",i,!0,{})},737:function(e,t,n){var i=n(616);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),n(346).Z("248de319",i,!0,{})},346:function(e,t,n){"use strict";function i(e,t){for(var n=[],i={},r=0;r<t.length;r++){var a=t[r],o=a[0],s={id:e+":"+r,css:a[1],media:a[2],sourceMap:a[3]};i[o]?i[o].parts.push(s):n.push(i[o]={id:o,parts:[s]})}return n}n.d(t,{Z:function(){return h}});var r="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!r)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a={},o=r&&(document.head||document.getElementsByTagName("head")[0]),s=null,l=0,d=!1,c=function(){},u=null,m="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function h(e,t,n,r){d=n,u=r||{};var o=i(e,t);return f(o),function(t){for(var n=[],r=0;r<o.length;r++){var s=a[o[r].id];s.refs--,n.push(s)}t?f(o=i(e,t)):o=[];for(var r=0;r<n.length;r++){var s=n[r];if(0===s.refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete a[s.id]}}}}function f(e){for(var t=0;t<e.length;t++){var n=e[t],i=a[n.id];if(i){i.refs++;for(var r=0;r<i.parts.length;r++)i.parts[r](n.parts[r]);for(;r<n.parts.length;r++)i.parts.push(w(n.parts[r]));i.parts.length>n.parts.length&&(i.parts.length=n.parts.length)}else{for(var o=[],r=0;r<n.parts.length;r++)o.push(w(n.parts[r]));a[n.id]={id:n.id,refs:1,parts:o}}}}function g(){var e=document.createElement("style");return e.type="text/css",o.appendChild(e),e}function w(e){var t,n,i=document.querySelector("style["+m+'~="'+e.id+'"]');if(i){if(d)return c;i.parentNode.removeChild(i)}if(p){var r=l++;t=b.bind(null,i=s||(s=g()),r,!1),n=b.bind(null,i,r,!0)}else t=v.bind(null,i=g()),n=function(){i.parentNode.removeChild(i)};return t(e),function(i){i?(i.css!==e.css||i.media!==e.media||i.sourceMap!==e.sourceMap)&&t(e=i):n()}}var _=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function b(e,t,n,i){var r=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=_(t,r);else{var a=document.createTextNode(r),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function v(e,t){var n=t.css,i=t.media,r=t.sourceMap;if(i&&e.setAttribute("media",i),u.ssrId&&e.setAttribute(m,t.id),r&&(n+="\n/*# sourceURL="+r.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},d={};function c(e){var t=d[e];if(void 0!==t)return t.exports;var n=d[e]={id:e,exports:{}};return l[e](n,n.exports,c),n.exports}c.m=l,c.d=function(e,t){for(var n in t)c.o(t,n)&&!c.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},c.f={},c.e=function(e){return Promise.all(Object.keys(c.f).reduce(function(t,n){return c.f[n](e,t),t},[]))},c.u=function(e){return"static/js/"+({118:"e0e016f47b8dfe3603f7",423:"f0c0d45c010d678a42ca",863:"996691b57507a6d7b1a1"})[e]+".js"},c.miniCssF=function(e){return"static/css/"+(736===e?"twint-payment":e)+".css"},c.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},e={},t="administration:",c.l=function(n,i,r,a){if(e[n]){e[n].push(i);return}if(void 0!==r)for(var o,s,l=document.getElementsByTagName("script"),d=0;d<l.length;d++){var u=l[d];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==t+r){o=u;break}}o||(s=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,c.nc&&o.setAttribute("nonce",c.nc),o.setAttribute("data-webpack",t+r),o.src=n),e[n]=[i];var m=function(t,i){o.onerror=o.onload=null,clearTimeout(p);var r=e[n];if(delete e[n],o.parentNode&&o.parentNode.removeChild(o),r&&r.forEach(function(e){return e(i)}),t)return t(i)},p=setTimeout(m.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=m.bind(null,o.onerror),o.onload=m.bind(null,o.onload),s&&document.head.appendChild(o)},c.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},c.p="bundles/twintpayment/",n=function(e,t,n,i){var r=document.createElement("link");return r.rel="stylesheet",r.type="text/css",r.onerror=r.onload=function(a){if(r.onerror=r.onload=null,"load"===a.type)n();else{var o=a&&("load"===a.type?"missing":a.type),s=a&&a.target&&a.target.href||t,l=Error("Loading CSS chunk "+e+" failed.\n("+s+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=o,l.request=s,r.parentNode.removeChild(r),i(l)}},r.href=t,document.head.appendChild(r),r},i=function(e,t){for(var n=document.getElementsByTagName("link"),i=0;i<n.length;i++){var r=n[i],a=r.getAttribute("data-href")||r.getAttribute("href");if("stylesheet"===r.rel&&(a===e||a===t))return r}for(var o=document.getElementsByTagName("style"),i=0;i<o.length;i++){var r=o[i],a=r.getAttribute("data-href");if(a===e||a===t)return r}},r={736:0},c.f.miniCss=function(e,t){r[e]?t.push(r[e]):0!==r[e]&&({118:1})[e]&&t.push(r[e]=new Promise(function(t,r){var a=c.miniCssF(e),o=c.p+a;if(i(a,o))return t();n(e,o,t,r)}).then(function(){r[e]=0},function(t){throw delete r[e],t}))},a={736:0},c.f.j=function(e,t){var n=c.o(a,e)?a[e]:void 0;if(0!==n){if(n)t.push(n[2]);else{var i=new Promise(function(t,i){n=a[e]=[t,i]});t.push(n[2]=i);var r=c.p+c.u(e),o=Error();c.l(r,function(t){if(c.o(a,e)&&(0!==(n=a[e])&&(a[e]=void 0),n)){var i=t&&("load"===t.type?"missing":t.type),r=t&&t.target&&t.target.src;o.message="Loading chunk "+e+" failed.\n("+i+": "+r+")",o.name="ChunkLoadError",o.type=i,o.request=r,n[1](o)}},"chunk-"+e,e)}}},o=function(e,t){var n,i,r=t[0],o=t[1],s=t[2],l=0;if(r.some(function(e){return 0!==a[e]})){for(n in o)c.o(o,n)&&(c.m[n]=o[n]);s&&s(c)}for(e&&e(t);l<r.length;l++)i=r[l],c.o(a,i)&&a[i]&&a[i][0](),a[i]=0},(s=window["webpackJsonpPlugintwint-payment"]=window["webpackJsonpPlugintwint-payment"]||[]).forEach(o.bind(null,0)),s.push=o.bind(null,s.push.bind(s)),window?.__sw__?.assetPath&&(c.p=window.__sw__.assetPath+"/bundles/twintpayment/"),function(){"use strict";var e=JSON.parse('{"twint":{"title":"TWINT Bezahlung","name":"TWINT Bezahlung","express":{"title":"TWINT Express Checkout","menuItem":"TWINT Express Checkout"},"general":{"menuItem":"TWINT Zugangsdaten"},"settings":{"button":{"save":"Speichern","testing":"Zugangsdaten \xfcberpr\xfcfen â€¦"},"testCredentials":{"error":{"title":"Fehler bei den Zugangsdaten","message":"Ung\xfcltige Zugangsdaten. Bitte \xfcberpr\xfcfen: UUID Ihres Stores, Zertifikat und Umfeld (Modus)"}},"storeUuid":{"label":"UUID Ihres Stores","placeholder":"UUID Ihres Stores eingeben","helpText":"Die UUID Ihres Stores wird von TWINT bereitgestellt","error":{"title":"UUID Ihres Stores","invalidFormat":"Ung\xfcltige UUID Ihres Stores. UUID Ihres Stores muss eine UUIDv4 sein","required":"UUID Ihres Stores erforderlich"}},"certificate":{"placeholder":"Zertifikatsdatei hochladen (.p12)","error":{"title":"Ung\xfcltiges Zertifikat","message":"Fehler beim Lesen des Zertifikats. Bitte erneut versuchen","general":"Fehler beim Lesen des Zertifikats. Bitte erneut versuchen","required":"Zertifikatsdatei erforderlich","invalid":"Zertifikat ist ung\xfcltig","ERROR_INVALID_INPUT":"Zertifikatsdatei und Passwort erforderlich","ERROR_INVALID_UNKNOWN":"Zertifikat kann nicht validiert werden. Bitte erneut versuchen","ERROR_INVALID_CERTIFICATE_FORMAT":"Zertifikatsformat ung\xfcltig","ERROR_INVALID_PASSPHRASE":"Passwort ung\xfcltig","ERROR_INVALID_ISSUER_COUNTRY":"Land des Herausgebers ung\xfcltig","ERROR_INVALID_ISSUER_ORGANIZATION":"Organisation des Herausgebers ung\xfcltig","ERROR_INVALID_EXPIRY_DATE":"Verfalldatum ung\xfcltig","ERROR_CERTIFICATE_EXPIRED":"Zertifikat abgelaufen","ERROR_CERTIFICATE_NOT_YET_VALID":"Zertifikat noch nicht g\xfcltig"},"success":{"title":"Zertifikat erfolgreich validiert","message":"Ihr Zertifikat wurde erfolgreich validiert"},"password":{"label":"Zertifikatspasswort","helpText":"Zertifikatspasswort erfassen","error":"Zertifikatsdatei erforderlich"},"notice":{"label":"Zertifikat verschl\xfcsselt und gespeichert"},"button":{"label":"Neues Zertifikat hochladen"}}},"order":{"stateCard":{"label":"Zahlung wurde von TWINT bearbeitet","showTransactionLogModal":"TWINT Transaktionsverlauf (Logs) anzeigen"},"transactionLog":{"cardTitle":"Transaktionsverlauf (Logs)","list":{"title":"Transaktionen","columns":{"createdAt":"Erstellt am","apiMethod":"API-Methode","soapAction":"SOAP action","orderID":"Order ID","order":"Bestellstatus","transaction":"Transaktions-Nummer","request":"Anfrage","response":"Antwort","soapRequest":"Anfrage","soapResponse":"Antwort","exception":"Ausnahme","payment":"Zahlungsstatus","action":{"view":"Details ansehen"}},"modal":{"title":"Verlaufsdetails","close":"Schliessen","soapMethod":"Soap-Methode"}}},"reversalHistory":{"cardTitle":"Stornierungsverlauf","columns":{"amount":"Betrag","currency":"W\xe4hrung","reason":"Hinweis","createdAt":"Erstellt am"}},"refundAction":{"cardTitle":"R\xfcckerstattung","reason":{"label":"Hinweis","placeholder":"R\xfcckerstattung mit Hinweis versehen"},"refundAmount":{"label":"Betrag","helpText":"Der R\xfcckerstattungsbetrag darf den Totalbetrag der Bestellung nicht \xfcberschreiten"},"confirmButton":{"text":"Ausf\xfchren"}}}},"refund":{"modal":{"title":"Neue R\xfcckerstattung erstellen"},"buttons":{"refund":{"label":"R\xfcckerstattung"}},"refundable":{"title":"Total Restbetrag R\xfcckerstattung","notice":"Automatische Anpassung des Totalbetrags an den H\xf6chstbetrag der R\xfcckerstattung","fullRefundNotice":"No refundable amount left for this order"},"error":{"title":"Fehler bei der R\xfcckerstattung"}},"sw-order":{"detail":{"twint":"TWINT"}}}'),t=JSON.parse('{"twint":{"name":"TWINT payment","title":"TWINT payment","express":{"title":"TWINT Express Checkout","menuItem":"TWINT Express Checkout"},"general":{"menuItem":"TWINT credentials"},"settings":{"button":{"save":"Save","testing":"Verifying the credentials..."},"testCredentials":{"error":{"title":"Credentials error","message":"Invalid credentials. Please check again: Store UUID, certificate and environment (mode)"}},"storeUuid":{"label":"Store UUID","placeholder":"Enter your Store UUID","helpText":"The Store UUID is provided by TWINT","error":{"title":"Store UUID","invalidFormat":"Invalid Store UUID. Store UUID needs to be a UUIDv4","required":"Store UUID is required"}},"certificate":{"placeholder":"Upload a certificate file (.p12)","error":{"title":"Certificate","message":"An error occurred reading the certificate. Please try again","general":"An error occurred reading the certificate. Please try again","required":"Certificate file is required","invalid":"Certificate is invalid","ERROR_INVALID_INPUT":"Certificate file and password are required","ERROR_INVALID_UNKNOWN":"Certificate cannot be validated. Please try again","ERROR_INVALID_CERTIFICATE_FORMAT":"Invalid certificate format","ERROR_INVALID_PASSPHRASE":"Invalid password","ERROR_INVALID_ISSUER_COUNTRY":"Invalid issuer country","ERROR_INVALID_ISSUER_ORGANIZATION":"Invalid issuer organization","ERROR_INVALID_EXPIRY_DATE":"Invalid expiry date","ERROR_CERTIFICATE_EXPIRED":"Certificate expired","ERROR_CERTIFICATE_NOT_YET_VALID":"Certificate is not yet valid"},"success":{"title":"Certificate validation successful","message":"Your certificate is successfully validated"},"password":{"label":"Certificate password","error":"Certificate password is required","helpText":"Enter the certificate password"},"notice":{"label":"Certificate encrypted and stored"},"button":{"label":"Upload new certificate"}}},"order":{"stateCard":{"label":"Payment has been processed by TWINT","showTransactionLogModal":"Show TWINT transaction logs"},"transactionLog":{"cardTitle":"Transaction logs","list":{"title":"Transactions","columns":{"createdAt":"Created at","apiMethod":"API method","soapAction":"SOAP action","orderID":"Order ID","order":"Order status","transaction":"Order transaction ID","request":"Request","response":"Response","soapRequest":"Request","soapResponse":"Response","exception":"Exception","payment":"Payment status","action":{"view":"View details"}},"modal":{"title":"Log details","close":"Close","soapMethod":"Soap method"}}},"reversalHistory":{"cardTitle":"Reversal history","columns":{"amount":"Amount","currency":"Currency","reason":"Note","createdAt":"Created at"}},"refundAction":{"cardTitle":"Refund","reason":{"label":"Note","placeholder":"Add note to this refund"},"refundAmount":{"label":"Amount","helpText":"The refund amount cannot exceed the total order amount"},"confirmButton":{"text":"Execute"}}},"refund":{"modal":{"title":"Create new refund"},"buttons":{"refund":{"label":"Refund"}},"refundable":{"title":"Total refundable amount left","notice":"Total amount automatically adjusted to the maximum refund amount.","fullRefundNotice":"No refundable amount left for this order"},"error":{"title":"Refund error"}}},"sw-order":{"detail":{"twint":"TWINT"}}}'),n=JSON.parse('{"twint":{"name":"Paiement TWINT","title":"Paiement TWINT","express":{"title":"TWINT Express Checkout","menuItem":"TWINT Express Checkout"},"general":{"menuItem":"Identifiants TWINT"},"settings":{"button":{"save":"Enregistrer","testing":"V\xe9rification des identifiants..."},"testCredentials":{"error":{"title":"Erreur dâ€™identifiants","message":"Identifiants invalides. Veuillez v\xe9rifier \xe0 nouveau: UUID de votre commerce, certificat et environnement (mode)"}},"storeUuid":{"label":"UUID de votre commerce","placeholder":"Saisissez lâ€™UUID de votre commerce","helpText":"Lâ€™UUID de votre commerce est fourni par TWINT","error":{"title":"UUID de votre commerce","invalidFormat":"UUID de votre commerce invalide. Lâ€™UUID de votre commerce doit \xeatre un UUIDv4","required":"Lâ€™UUID de votre commerce est requis"}},"certificate":{"placeholder":"T\xe9l\xe9charger un fichier de certificat (.p12)","error":{"title":"Certificat invalide","message":"Une erreur sâ€™est produite lors de la lecture du certificat. Veuillez r\xe9essayer","general":"Une erreur sâ€™est produite lors de la lecture du certificat. Veuillez r\xe9essayer","required":"Le fichier de certificat est requis","invalid":"Le certificat est invalide","ERROR_INVALID_INPUT":"Le fichier de certificat et le mot de passe sont requis","ERROR_INVALID_UNKNOWN":"Le certificat ne peut pas \xeatre valid\xe9. Veuillez r\xe9essayer","ERROR_INVALID_CERTIFICATE_FORMAT":"Format du certificat invalide","ERROR_INVALID_PASSPHRASE":"Mot de passe invalide","ERROR_INVALID_ISSUER_COUNTRY":"Pays \xe9metteur invalide","ERROR_INVALID_ISSUER_ORGANIZATION":"Organisation \xe9mettrice invalide","ERROR_INVALID_EXPIRY_DATE":"Date dâ€™expiration invalide","ERROR_CERTIFICATE_EXPIRED":"Certificat expir\xe9","ERROR_CERTIFICATE_NOT_YET_VALID":"Le certificat nâ€™est pas encore valide"},"success":{"title":"Validation du certificat r\xe9ussie","message":"Votre certificat a \xe9t\xe9 valid\xe9 avec succ\xe8s"},"password":{"label":"Mot de passe du certificat","helpText":"Saisissez le mot de passe du certificat","error":"Mot de passe du certificat est requis"},"notice":{"label":"Certificat crypt\xe9 et enregistr\xe9"},"button":{"label":"T\xe9l\xe9charger un nouveau certificat"}}},"order":{"stateCard":{"label":"Le paiement a \xe9t\xe9 trait\xe9 par TWINT","showTransactionLogModal":"Afficher les journaux de transactions TWINT"},"transactionLog":{"cardTitle":"Journal des transactions","list":{"title":"Transactions","columns":{"createdAt":"Cr\xe9\xe9e \xe0","orderID":"ID de la commande","apiMethod":"M\xe9thode API","soapAction":"SOAP action","order":"Statut de la commande","transaction":"ID de la transaction de la commande","request":"Demande","response":"R\xe9ponse","soapRequest":"Request","soapResponse":"Response","exception":"Exception","payment":"Statut du paiement","action":{"view":"Voir les d\xe9tails"}},"modal":{"title":"D\xe9tails du journal","close":"Fermer","soapMethod":"M\xe9thode SOAP"}}},"reversalHistory":{"cardTitle":"Historique des annulations","columns":{"amount":"Montant","currency":"Monnaie","reason":"Note","createdAt":"Cr\xe9\xe9e \xe0"}},"refundAction":{"cardTitle":"Remboursement","reason":{"label":"Note","placeholder":"Ajouter une note \xe0 ce remboursement"},"refundAmount":{"label":"Montant","helpText":"Le montant du remboursement ne peut exc\xe9der le montant total de la commande"},"confirmButton":{"text":"Ex\xe9cuter"}}},"refund":{"modal":{"title":"Cr\xe9er nouveau remboursement"},"buttons":{"refund":{"label":"Refund"}},"refundable":{"title":"Montant total restant \xe0 rembourser","notice":"Montant total automatiquement ajust\xe9 au montant maximal du montant du remboursement.","fullRefundNotice":"No refundable amount left for this order "},"error":{"title":"Erreur de remboursement"}}},"sw-order":{"detail":{"twint":"TWINT"}}}'),i=JSON.parse('{"twint":{"name":"Pagamento TWINT","title":"Pagamento TWINT","express":{"title":"TWINT Express Checkout","menuItem":"TWINT Express Checkout"},"general":{"menuItem":"Credenziali TWINT"},"settings":{"button":{"save":"Salva","testing":"Verifica delle credenziali in corso..."},"testCredentials":{"error":{"title":"Errore credenziali","message":"Credenziali non valide. Ti preghiamo di ricontrollare: UUID del suo negozio, certificato e ambiente (modalit\xe0)"}},"storeUuid":{"label":"UUID del suo negozio","placeholder":"Inserisci lâ€™UUID del suo negozio","helpText":"Lâ€™UUID del suo negozio \xe8 fornito da TWINT.","error":{"title":"UUID del suo negozio","invalidFormat":"UUID del suo negozio non valido. Lâ€™UUID del suo negozio deve essere un UUIDv4.","required":"Lâ€™UUID del suo negozio \xe8 necessario."}},"certificate":{"placeholder":"Carica un file del certificato (.p12)","error":{"title":"Certificato non valido","message":"Si \xe8 verificato un errore durante la lettura del certificato. Ti preghiamo di riprovare","general":"Si \xe8 verificato un errore durante la lettura del certificato. Ti preghiamo di riprovare","required":"Il file del certificato \xe8 necessario","invalid":"Il certificato non \xe8 valido","ERROR_INVALID_INPUT":"Il file del certificato e la password sono necessari.","ERROR_INVALID_UNKNOWN":"Il certificato non pu\xf2 essere convalidato. Ti preghiamo di riprovare.","ERROR_INVALID_CERTIFICATE_FORMAT":"Formato certificato non valido","ERROR_INVALID_PASSPHRASE":"Password non valida","ERROR_INVALID_ISSUER_COUNTRY":"Paese emittente non valido","ERROR_INVALID_ISSUER_ORGANIZATION":"Organizzazione emittente non valida","ERROR_INVALID_EXPIRY_DATE":"Data di scadenza non valida","ERROR_CERTIFICATE_EXPIRED":"Certificato scaduto","ERROR_CERTIFICATE_NOT_YET_VALID":"Il certificato non \xe8 ancora valido."},"success":{"title":"Convalida certificato andata a buon fine","message":"Il tuo certificato \xe8 stato convalidato con successo."},"password":{"label":"Password del certificato","helpText":"Si prega di inserire la password del certificato","error":"Password del certificato \xe8 necessario"},"notice":{"label":"Certificato crittografato e archiviato"},"button":{"label":"Carica nuovo certificato"}}},"order":{"stateCard":{"label":"Il pagamento \xe8 stato processato da TWINT","showTransactionLogModal":"Mostra log transazioni TWINT"},"transactionLog":{"cardTitle":"Log transazioni","list":{"title":"Transactions","columns":{"createdAt":"Creato a","orderID":"ID ordine","apiMethod":"Metodo API","soapAction":"SOAP action","order":"Stato dellâ€™ordine","transaction":"ID transazione ordine","request":"Richiesta","response":"Risposta","soapRequest":"Request","soapResponse":"Response","exception":"Exception","payment":"Stato del pagamento","action":{"view":"Visualizza dettagli"}},"modal":{"title":"Dettagli del log","close":"Chiudi","soapMethod":"Metodo Soap"}}},"reversalHistory":{"cardTitle":"Cronologia storni","columns":{"amount":"Importo","currency":"Valuta","reason":"Nota","createdAt":"Creato a"}},"refundAction":{"cardTitle":"Rimborso","reason":{"label":"Nota","placeholder":"Aggiungi nota a questo rimborso"},"refundAmount":{"label":"Importo","helpText":"Lâ€™importo del rimborso non pu\xf2 superare lâ€™importo totale dellâ€™ordine."},"confirmButton":{"text":"Esegui"}}},"refund":{"modal":{"title":"Crea nuovo rimborso"},"buttons":{"refund":{"label":"Refund"}},"refundable":{"title":"Importo totale rimborsabile rimanente","notice":"Importo totale automaticamente adattato allâ€™importo massimo del rimborso.","fullRefundNotice":"No refundable amount left for this order"},"error":{"title":"Errore rimborso"}}},"sw-order":{"detail":{"twint":"TWINT"}}}');Shopware.Locale.extend("en-GB",t),Shopware.Locale.extend("de-CH",e),Shopware.Locale.extend("fr-CH",n),Shopware.Locale.extend("it-CH",i);let r=Shopware.Classes.ApiService;class a extends r{constructor(e,t,n="twint"){super(e,t,n)}uploadFile(e,t){let n=this.getBasicHeaders();n["Content-Type"]="multipart/form-data";let i=new FormData;return i.append("file",e),i.append("password",t),this.httpClient.post("_actions/twint/extract-pem",i,{headers:n})}}let o=Shopware.Classes.ApiService;class s extends o{constructor(e,t,n="twint"){super(e,t,n)}validateCredentials(e){let t=this.getBasicHeaders();return this.httpClient.post("_actions/twint/validate-api-credential",e,{headers:t}).then(e=>o.handleResponse(e))}}let l=Shopware.Classes.ApiService;class d extends l{constructor(e,t,n="twint"){super(e,t,n)}refund(e){let t=this.getBasicHeaders();return this.httpClient.post("_actions/twint/refund",e,{headers:t}).then(e=>l.handleResponse(e))}orderStatus(e){let t=this.getBasicHeaders();return this.httpClient.get(`_actions/twint/order/${e}/status`,{headers:t}).then(e=>l.handleResponse(e))}}let{Application:u}=Shopware,m=u.getContainer("init").httpClient,p=Shopware.Service("loginService");u.addServiceProvider("twintFileUploadService",()=>new a(m,p)),u.addServiceProvider("TwintPaymentSettingsService",e=>new s(m,p)),u.addServiceProvider("TwintPaymentService",e=>new d(m,p)),c(905);let{Component:h,Mixin:f}=Shopware,{ShopwareError:g}=Shopware.Classes;h.register("twint-certificate",{template:'{% block twint_certificate_block %}\n    <div>\n        <sw-file-input\n                v-model="currentCertFile"\n                :allowed-mime-types="[\'application/x-pkcs12\']"\n                :maxFileSize="8*1024*1024"\n                @change="onFileChange"\n                required\n                :disabled="isDisabled"\n        >\n            <template #caption-label v-if="certificate == null || certificate == \'\'">\n                {{ $tc(\'twint.settings.certificate.placeholder\') }}\n            </template>\n\n            <template #caption-label v-if="certificate != null && certificate != \'\'">\n                {{ $tc(\'twint.settings.certificate.notice.label\') }}\n            </template>\n        </sw-file-input>\n\n        <sw-password-field\n                v-if="certificate == \'\' || certificate == null"\n                v-model:value="currentPassword"\n                :entity-collection="null"\n                :error="passwordError"\n                class="twint-config-field"\n                :label="$tc(\'twint.settings.certificate.password.label\')"\n                :help-text="$tc(\'twint.settings.certificate.password.helpText\')"\n                @blur="updatePassword"\n                autocomplete="off"\n                required\n                :disabled="isDisabled"\n        >\n            <template #suffix>\n                {% block twint_certificate_password_suffix_block %}\n                    <sw-icon name="regular-low-vision" size="22px"></sw-icon>\n                {% endblock %}\n            </template>\n        </sw-password-field>\n    </div>\n{% endblock %}\n',mixins:[f.getByName("notification")],inject:["feature","systemConfigApiService"],props:{disabled:{type:Boolean,default:!1}},data(){return{currentPassword:null,currentCertFile:null,passwordError:null,validatePassword:"",storeUuid:null,certificate:null,validated:null,buttonSelector:".sw-file-input__dropzone .sw-file-input__button"}},computed:{isDisabled(){return this.disabled}},created(){this.loadSettings(),this.registerValidator()},methods:{registerValidator(){let e=new CustomEvent("twint-add-validators",{detail:{method:this.validate,self:this}});document.dispatchEvent(e)},validate(e){let t=!0;return!e.certificate&&(!e.currentPassword||0===e.currentPassword.length)&&(e.createNotificationError({title:e.$tc("twint.settings.certificate.error.title"),message:e.$tc("twint.settings.certificate.password.error"),growl:!0}),t=!1),e.certificate||null!=e.currentCertFile||(e.createNotificationError({title:e.$tc("twint.settings.certificate.error.title"),message:e.$tc("twint.settings.certificate.error.required")}),t=!1),t},onFileChange(e){if(this.certificate="",this.updateCertificate(),this.currentCertFile=e,this.currentCertFile&&(!this.currentPassword||0===this.currentPassword.length)){this.passwordError=new g({code:"c1051bb4-d103-4f74-8988-acbcafc7fdc3"}),this.$root.$emit("update-lock",!0);return}if(!this.currentCertFile){this.passwordError=null,this.$root.$emit("update-lock",!1);return}this.extractPem()},updatePassword(e){this.currentCertFile&&(!this.currentPassword||0===this.currentPassword.length)?(this.passwordError=new g({code:"c1051bb4-d103-4f74-8988-acbcafc7fdc3"}),this.$root.$emit("update-lock",!0)):this.currentCertFile&&(this.passwordError=null,this.extractPem())},extractPem(){let e=Shopware.Service("twintFileUploadService");this.currentCertFile&&this.currentPassword&&0!==this.currentPassword.length&&(this.$refs.myInput,e.uploadFile(this.currentCertFile,this.currentPassword??"").then(e=>{this.certificate=e.data.data,this.updateCertificate(),this.changeButtonText(),this.createNotification({title:this.$tc("twint.settings.certificate.success.title"),message:this.$tc("twint.settings.certificate.success.message"),growl:!0}).then(e=>{this.$root.$emit("update-lock",!1)})}).catch(e=>{if(this.certificate="",this.changeButtonText(),400===e.response.status){let t=e.response.data.errorCode;return this.createNotificationError({title:this.$tc("twint.settings.certificate.error.title"),message:this.$tc("twint.settings.certificate.error."+t),growl:!0})}this.createNotificationError({title:this.$tc("twint.settings.certificate.error.title"),message:this.$tc("twint.settings.certificate.error.general"),growl:!0})}))},updateCertificate(){if(this.feature.isActive("v6.6.0.0")){this.$emit("update:value",this.certificate);return}this.$emit("input",this.certificate),this.changeButtonText()},async loadSettings(){this.isLoading=!0;let e=await this.systemConfigApiService.getValues("TwintPayment.settings");Object.keys(e).length>0&&(this.storeUuid=e["TwintPayment.settings.storeUuid"],this.certificate=e["TwintPayment.settings.certificate"],this.validated=e["TwintPayment.settings.validated"]),this.changeButtonText(),this.isLoading=!1},changeButtonText(){this.button=document.querySelector(this.buttonSelector),this.button&&(null!=this.certificate&&""!==this.certificate?this.button.textContent=this.$tc("twint.settings.certificate.button.label"):this.button.textContent=this.$tc("global.sw-file-input.buttonChoose"))}}}),c(370),c(467),c(711),c(737);let{Component:w,Mixin:_}=Shopware,{mapState:b}=Shopware.Component.getComponentHelper(),{Criteria:v}=Shopware.Data;w.register("twint-payment-actions",{template:'<div class="sw-order-detail-twint">\n    <sw-container>\n        {% block sw_order_detail_twint_actions_row_reversal_form %}\n            <sw-card  v-if="canRefund" position-identifier="twint-details-actions" :title="$tc(\'twint.order.refundAction.cardTitle\')">\n                {% block sw_order_detail_twint_actions_rows %}\n                    <template #default>\n                        {% block sw_order_detail_twint_actions_row_primary %}\n                            <div class="twint-payment-actions__button-container">\n                                <span class="twint-refundable-amount__title" v-if="refundableAmount > 0">\n                                {{ $tc(\'twint.refund.refundable.title\') }}\n                                </span>\n                                <span class="twint-refundable-amount__notice" v-if="refundableAmount == 0">\n                                {{ $tc(\'twint.refund.refundable.fullRefundNotice\') }}\n                                </span>\n                                <sw-label v-if="refundableAmount > 0">{{ currencyFilter(refundableAmount, currency, decimalPrecision) }}</sw-label>\n                                <sw-button variant="primary"\n                                           size="small"\n                                           :disabled="refundableAmount==0 || !acl.can(\'order.editor\')"\n                                           @click="showModal">\n                                    {{ $tc(\'twint.refund.buttons.refund.label\') }}\n                                </sw-button>\n                            </div>\n                            {% block twint_modal_refund %}\n                                <sw-modal variant="small"\n                                          :title="$tc(`twint.refund.modal.title`)" v-if="showRefundModal" @modal-close="onCloseModal">\n                                    <sw-alert class="twint-refundable-amount__notice-message" v-if="refundableAmount==refundAmount" variant="warning">\n                                        <span>{{ $tc(\'twint.refund.refundable.notice\') }}</span>\n                                    </sw-alert>\n\n                                    {% block twint_refund_amount %}\n                                        <sw-number-field\n                                                v-model:value="refundAmount"\n                                                :max="refundableAmount"\n                                                :min="0"\n                                                numberType="float"\n                                                :step="dynamicStep"\n                                                :label="$tc(\'twint.order.refundAction.refundAmount.label\')"\n                                                :helpText="$tc(\'twint.order.refundAction.refundAmount.helpText\')">\n                                            <template #suffix>\n                                                {{ currency }}\n                                            </template>\n                                        </sw-number-field>\n                                    {% endblock %}\n\n                                    {% block twint_refund_reason %}\n                                        <sw-textarea-field\n                                                v-model:value="reason"\n                                                maxLength="127"\n                                                :label="$tc(\'twint.order.refundAction.reason.label\')"\n                                                :placeholder="$tc(\'twint.order.refundAction.reason.placeholder\')">\n                                        </sw-textarea-field>\n                                    {% endblock %}\n\n                                    {% block twint_refund_confirm_button %}\n                                        <template #modal-footer>\n                                            <sw-button variant="primary"\n                                                       @click="refund">\n                                                {{ $tc(\'twint.order.refundAction.confirmButton.text\') }}\n                                            </sw-button>\n                                        </template>\n                                    {% endblock %}\n\n                                    <sw-loader v-if="isLoading"></sw-loader>\n                                </sw-modal>\n                            {% endblock %}\n                        {% endblock %}\n                    </template>\n                {% endblock %}\n            </sw-card>\n        {% endblock %}\n        {% block sw_order_detail_twint_actions_row_reversal_history %}\n            <sw-card position-identifier="twint-details-actions-reversal-list" :title="$tc(\'twint.order.reversalHistory.cardTitle\')">\n                <template #grid>\n                    {% block sw_order_detail_twint_reversal_history_grid %}\n                        <sw-data-grid v-if="reversalHistory.length > 0" :data-source="reversalHistory"\n                                      :columns="paymentColumns"\n                                      :showActions="false"\n                                      :showSelection="false">\n                            <template #column-createdAt="{ item }">\n                                {{ dateFilter(item.createdAt) }}\n                            </template>\n                            <template #column-amount="{ item }">\n                                {{ currencyFilter(item.amount, item.currency, decimalPrecision)}}\n                            </template>\n                        </sw-data-grid>\n                    {% endblock %}\n                </template>\n            </sw-card>\n        {% endblock %}\n    </sw-container>\n</div>\n',inject:["repositoryFactory","acl","TwintPaymentService","orderStateMachineService"],mixins:[_.getByName("notification"),_.getByName("sw-inline-snippet")],props:{order:{type:Object,required:!0},orderId:{type:String,required:!0},totalAmount:{type:Number,required:!0},currency:{type:String,required:!0},decimalPrecision:{type:String,required:!0}},data(){return{reversalId:"",reversalHistory:[],refundAmount:0,totalOrderAmount:0,refundedAmount:0,reason:"",refundableAmount:0,isLoading:!1,showRefundModal:!1,sortBy:"createdAt",sortDirection:"DESC",naturalSorting:!0,stateType:"order_transaction",transaction:null,currentActionName:null}},created(){this.createdComponent()},computed:{...b("swOrderDetail",["order","versionContext","orderAddressIds","editing","loading"]),reversalHistoryRepository(){return this.repositoryFactory.create("twint_reversal_history")},paymentColumns(){return[{property:"amount",label:this.$tc("twint.order.reversalHistory.columns.amount"),rawData:!0},{property:"reason",label:this.$tc("twint.order.reversalHistory.columns.reason"),rawData:!0},{property:"createdAt",label:this.$tc("twint.order.reversalHistory.columns.createdAt"),rawData:!0}]},dateFilter(){return Shopware.Filter.getByName("date")},canRefund(){for(let e=0;e<this.order.transactions.length;e+=1)if(["paid","paid_partially","refunded_partially","refunded"].includes(this.order.transactions[e].stateMachineState.technicalName))return!0;return!1},currencyFilter(){return Shopware.Filter.getByName("currency")},dynamicStep(){return this.decimalPrecision<0?.01:Math.pow(10,-this.decimalPrecision)}},methods:{createdComponent(){this.getReversalHistoryList();for(let e=0;e<this.order.transactions.length;e+=1)["cancelled","failed"].includes(this.order.transactions[e].stateMachineState.technicalName)||(this.transaction=this.order.transactions[e]);this.transaction=this.order.transactions.last();let e=JSON.parse((this.order?.customFields||{}).twint_api_response||"{}");this.totalOrderAmount=this.totalAmount,e?.amount&&(this.totalOrderAmount=e.amount.amount)},showModal(){this.showRefundModal=!0},closeModal(){this.showRefundModal=""},onCloseModal(){this.showRefundModal=""},getReversalHistoryList(){this.naturalSorting="createdAt"===this.sortBy;let e=new v;e.addSorting(v.sort(this.sortBy,this.sortDirection,this.naturalSorting)),e.addFilter(v.equals("order.id",this.orderId)),e.addAggregation(v.sum("refundedAmount","amount")),this.isLoading=!0,this.reversalHistoryRepository.search(e).then(e=>{this.reversalHistory=e;let t=parseFloat(e?.aggregations?.refundedAmount?.sum);this.isLoading=!1,this.refundableAmount=this.roundingFloat(this.totalOrderAmount-t,this.decimalPrecision)}).catch(()=>{this.isLoading=!1})},refund(){let e={orderId:this.orderId,amount:this.refundAmount,reason:this.reason};this.isLoading=!0,this.TwintPaymentService.refund(e).then(e=>{let t=e.success??!1;this.currentActionName=e.action??"",t?(this.showRefundModal=!1,this.getReversalHistoryList(),this.isLoading=!1,this.resetRefundForm(),this.$root.$emit("refund-finish"),this.updatePaymentStatus()):(this.isLoading=!1,this.createNotificationError({title:this.$tc("twint.refund.error.title"),message:e.error}))}).finally(e=>{this.isLoading=!1,this.showRefundModal=!1})},resetRefundForm(){this.refundAmount=0,this.reason=""},roundingFloat(e,t=2){return Number(Number(e).toFixed(t))},updatePaymentStatus(e=[],t=!1){if(this.currentActionName){let n=this.orderStateMachineService.transitionOrderTransactionState(this.transaction.id,this.currentActionName,{documentIds:e,sendMail:t});n&&n.then(()=>{this.TwintPaymentService.orderStatus(this.orderId).then(e=>{e.success&&(this.$root.$emit("save-edits"),this.$root.$emit("refund-finish"))})}).catch(e=>{this.createNotificationError({title:this.$tc("twint.refund.error.title"),message:e})}).finally(()=>{this.currentActionName=null})}}}}),c(387);let{Criteria:I}=Shopware.Data;Shopware.Component.override("sw-order-detail",{template:'{% block sw_order_detail_content_tabs_extension %}\n    {% parent %}\n    <sw-tabs-item\n            v-if="isTwintOrder"\n            class="sw-order-detail__tab-twint"\n            :route="{ name: \'sw.order.detail.twint\', params: { id: $route.params.id } }"\n            :title="$tc(\'sw-order.detail.twint\')">\n        {{ $tc(\'sw-order.detail.twint\') }}\n    </sw-tabs-item>\n{% endblock %}',data(){return{isLoading:!1,pairings:null,sortBy:"createdAt",sortDirection:"DESC",naturalSorting:!0}},methods:{createdComponent(){this.$super("createdComponent"),this.isLoading=!0,this.getPairingList(),this.$root.$on("save-edits",this.onSaveEdits)},getPairingList(){this.naturalSorting="createdAt"===this.sortBy;let e=new I;e.addSorting(I.sort(this.sortBy,this.sortDirection,this.naturalSorting)),e.addAssociation("order"),e.addFilter(I.equals("order.id",this.orderId)),this.isLoading=!0,this.twintPairingRepository.search(e).then(e=>{this.pairings=e,this.isLoading=!1}).catch(()=>{this.isLoading=!1})},async onSaveEdits(){return await this.$super("onSaveEdits")}},destroyed(){this.$root.$off("save-edits")},computed:{twintPairingRepository(){return this.repositoryFactory.create("twint_pairing")},isTwintOrder(){for(let e of this.order?.transactions??[])if(e.paymentMethod.handlerIdentifier.includes("Twint"))return!0;return!1}}}),c(42),c(235);let{Application:S,Mixin:y}=Shopware,{Criteria:R}=Shopware.Data,{mapState:T,mapGetters:A}=Shopware.Component.getComponentHelper();Shopware.Component.register("sw-order-detail-twint",{template:'{% block sw_order_detail_twint %}\n    <div class="sw-order-twint-detail">\n    <template>\n        <sw-card-view>\n            {% block sw_order_detail_twint_reversal_card %}\n                <twint-payment-actions\n                        :order="order"\n                        :orderId="orderId"\n                        :currency="order.currency.isoCode"\n                        :decimalPrecision="order.itemRounding.decimals"\n                        :totalAmount="order.amountTotal"\n                >\n                </twint-payment-actions>\n            {% endblock %}\n            {% block sw_order_detail_twint_transaction_log_card_grid %}\n                <sw-card :title="$tc(\'twint.order.transactionLog.cardTitle\')" class="twint-transaction-log" position-identifier="sw-order-detail-twint">\n                    <template\n                            v-if="(transactionLogs && transactionLogs.total > 0)"\n                            #grid\n                    >\n                        {% block twint_transaction_log_list_content %}\n                            <sw-entity-listing\n                                    class="twint-transaction-logs-grid"\n                                    v-if="transactionLogs"\n                                    :items="transactionLogs"\n                                    :repository="transactionLogRepository"\n                                    :columns="transactionLogColumns"\n                                    :sort-by="sortBy"\n                                    :sort-direction="sortDirection"\n                                    :showSelection="false"\n                                    :allowDelete="false"\n                                    :showDelete="false"\n                                    :isLoading="isLoading"\n                                    @on-add-new-refund="getTransactionLogList">\n\n                                {% block twint_transaction_log_list_content_order %}\n                                    <template #column-orderId="{ item }">\n                                        {% if item.order is not null and item.order.orderNumber is not null %}\n                                            <router-link :to="{ name: \'sw.order.detail\', params: { id: item.orderId }, query: { edit: false } }">\n                                                {{ item.order.orderNumber }}\n                                            </router-link>\n                                        {% else %}\n                                            {{ item.orderId }}\n                                        {% endif %}\n                                        {% if item.order.orderNumber is not empty %}\n                                        xx{{ item.order.orderNumber }}xxx\n                                        {% endif %}\n                                    </template>\n                                {% endblock %}\n\n                                {% block twint_transaction_log_list_content_api_method %}\n                                    <template #column-apiMethod="{ item }">\n                                        <sw-label>{{ item.apiMethod }}</sw-label>\n                                    </template>\n                                {% endblock %}\n\n                                {% block twint_transaction_log_list_content_soap_action %}\n                                    <template #column-soapAction="{ item }">\n                                        <sw-label v-for="action in item.soapAction">{{ action }}</sw-label>\n                                    </template>\n                                {% endblock %}\n\n                                {% block twint_transaction_log_list_content_transaction %}\n                                    <template #column-transactionId="{ item }">\n                                        {{ item.transactionId }}\n                                    </template>\n                                {% endblock %}\n\n                                {% block twint_transaction_log_list_content_payment %}\n                                    <template #column-paymentStateId="{ item }">\n                                        {% if item.paymentStateMachineState is not null %}\n                                            <sw-label :variant="getVariantState(\'order_transaction\', item.paymentStateMachineState)" appearance="badged" v-if="item.paymentStateMachineState.name !== \'\'">\n                                                {{ item.paymentStateMachineState.name }}\n                                            </sw-label>\n                                        {% endif %}\n                                    </template>\n                                {% endblock %}\n\n                                {% block twint_transaction_log_list_content_order %}\n                                    <template #column-orderStateId="{ item }">\n                                        {% if item.orderStateMachineState is not null %}\n                                            <sw-label :variant="getVariantState(\'order\', item.orderStateMachineState)" appearance="badged" v-if="item.paymentStateMachineState.name !== \'\'">\n                                                {{ item.orderStateMachineState.name }}\n                                            </sw-label>\n                                        {% endif %}\n                                    </template>\n                                {% endblock %}\n\n                                {% block twint_transaction_log_list_content_created_at %}\n                                    <template #column-createdAt="{ item }">\n                                        {{ dateFilter(item.createdAt) }}\n                                    </template>\n                                {% endblock %}\n\n                                {% block twint_transaction_log_list_content_actions %}\n                                    <template #actions="{ item }">\n                                        {% block twint_transaction_log_list_content_actions_view %}\n                                            <sw-context-menu-item class="twint-transaction-log-grid-btn-view"\n                                                                  @click="onOpenModalDetail(item.id)">\n                                                {{ $tc(\'twint.order.transactionLog.list.columns.action.view\') }}\n                                            </sw-context-menu-item>\n                                        {% endblock %}\n                                    </template>\n                                {% endblock %}\n                                {% block twint_transaction_log_list_content_action_modals %}\n                                    <template #action-modals="{ item }">\n                                        {% block twint_transaction_log_list_content_action_detail_modal %}\n                                            <sw-modal\n                                                    v-if="showTransactionLogDetailModal === item.id"\n                                                    :title="$tc(\'twint.order.transactionLog.list.modal.title\')"\n                                                    variant="large"\n                                                    @modal-close="onCloseModalDetail"\n                                            >\n                                                <div class="sw-data-grid">\n                                                    <table class="sw-data-grid__table">\n                                                        <tbody class="sw-data-grid__body">\n                                                            <tr class="sw-data-grid__row" v-if="item.order.orderNumber !== \'\'">\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        <b>{{ $tc(\'twint.order.transactionLog.list.columns.orderID\') }}:</b>\n                                                                    </div>\n                                                                </td>\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        {% if item.order is not null and item.order.orderNumber is not null %}\n                                                                            {{ item.order.orderNumber }}\n                                                                        {% else %}\n                                                                            {{ item.orderId }}\n                                                                        {% endif %}\n                                                                    </div>\n                                                                </td>\n                                                            </tr>\n                                                            <tr class="sw-data-grid__row" v-if="item.apiMethod !== null">\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        <b>{{ $tc(\'twint.order.transactionLog.list.columns.apiMethod\') }}:</b>\n                                                                    </div>\n                                                                </td>\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content"> {{ item.apiMethod }}</div>\n                                                                </td>\n                                                            </tr>\n                                                            <tr class="sw-data-grid__row" v-if="item.transactionId !== null">\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        <b>{{ $tc(\'twint.order.transactionLog.list.columns.transaction\') }}:</b>\n                                                                    </div>\n                                                                </td>\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content"> {{ item.transactionId }}</div>\n                                                                </td>\n                                                            </tr>\n                                                            <tr class="sw-data-grid__row" v-if="item.paymentStateMachineState.name !== \'\'">\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        <b>{{ $tc(\'twint.order.transactionLog.list.columns.payment\') }}:</b>\n                                                                    </div>\n                                                                </td>\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        {% if item.paymentStateMachineState is not null %}\n                                                                            <sw-label :variant="getVariantState(\'order_transaction\', item.paymentStateMachineState)" appearance="badged" v-if="item.paymentStateMachineState.name !== \'\'">\n                                                                                {{ item.paymentStateMachineState.name }}\n                                                                            </sw-label>\n                                                                        {% else %}\n                                                                            {{ item.paymentStateId }}\n                                                                        {% endif %}\n                                                                    </div>\n                                                                </td>\n                                                            </tr>\n                                                            <tr class="sw-data-grid__row" v-if="item.orderStateMachineState.name !== \'\'">\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        <b>{{ $tc(\'twint.order.transactionLog.list.columns.order\') }}:</b>\n                                                                    </div>\n                                                                </td>\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        {% if item.orderStateMachineState is not null %}\n                                                                            <sw-label :variant="getVariantState(\'order\', item.orderStateMachineState)" appearance="badged"  v-if="item.orderStateMachineState.name !== \'\'">\n                                                                                {{ item.orderStateMachineState.name }}\n                                                                            </sw-label>\n                                                                        {% else %}\n                                                                            {{ item.orderStateId }}\n                                                                        {% endif %}\n                                                                    </div>\n                                                                </td>\n                                                            </tr>\n                                                        </tbody>\n                                                    </table>\n                                                </div>\n                                                {% block twint_transaction_log_list_content_action_detail_modal_order %}\n                                                    <sw-card>\n                                                        <b class="sw-order-detail-twint-modal-soap-request">\n                                                            {{ $tc(\'twint.order.transactionLog.list.columns.request\') }}\n                                                        </b>\n                                                        <sw-textarea-field :disabled="true" :value="item.request" />\n                                                        <b class="sw-order-detail-twint-modal-soap-response">\n                                                            {{ $tc(\'twint.order.transactionLog.list.columns.response\') }}\n                                                        </b>\n                                                        <sw-textarea-field :disabled="true" :value="item.response"/>\n                                                        <div v-if="item.exception != \' \'">\n                                                            <p class="sw-order-detail-twint-modal-exception">\n                                                                <b>{{ $tc(\'twint.order.transactionLog.list.columns.exception\') }}</b>\n                                                            </p>\n                                                            <sw-textarea-field :disabled="true" :value="item.exception"/>\n                                                        </div>\n                                                    </sw-card>\n                                                    <sw-card v-for="(request, index) in item.soapRequest">\n                                                        <sw-container>\n                                                            <h4>{{ item.soapAction[index] }}</h4>\n                                                            <b class="sw-order-detail-twint-modal-soap-request">\n                                                                {{ $tc(\'twint.order.transactionLog.list.columns.soapRequest\') }}\n                                                            </b>\n                                                            <sw-textarea-field :disabled="true" :value="request"/>\n\n                                                            <b class="sw-order-detail-twint-modal-soap-response" v-if="item.soapResponse[index]">\n                                                                {{ $tc(\'twint.order.transactionLog.list.columns.soapResponse\') }}\n                                                            </b>\n                                                            <sw-textarea-field  v-if="item.soapResponse[index]" :disabled="true" :value="item.soapResponse[index]"/>\n                                                        </sw-container>\n                                                    </sw-card>\n                                                {% endblock %}\n\n                                                {% block twint_transaction_log_list_content_action_detail_modal_footer %}\n                                                    <template #modal-footer>\n                                                        {% block twint_transaction_log_list_content_action_detail_modal_close %}\n                                                            <sw-button size="small" @click="onCloseModalDetail">\n                                                                {{ $tc(\'twint.order.transactionLog.list.modal.close\') }}\n                                                            </sw-button>\n                                                        {% endblock %}\n                                                    </template>\n                                                {% endblock %}\n                                            </sw-modal>\n                                        {% endblock %}\n                                    </template>\n                                {% endblock %}\n                            </sw-entity-listing>\n                        {% endblock %}\n                    </template>\n                </sw-card>\n            {% endblock %}\n        </sw-card-view>\n    </template>\n    </div>\n{% endblock %}\n',mixins:[y.getByName("notification"),y.getByName("listing")],inject:["repositoryFactory","acl","stateStyleDataProviderService"],metaInfo(){return{title:this.$createTitle()}},data(){return{isLoading:!1,transactionLogs:null,refundedAmount:0,sortBy:"createdAt",sortDirection:"DESC",naturalSorting:!0,showTransactionLogDetailModal:!1}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!0,this.getTransactionLogList(),this.$root.$on("refund-finish",this.getTransactionLogList)},getTransactionLogList(){this.naturalSorting="createdAt"===this.sortBy;let e=new R;e.addSorting(R.sort(this.sortBy,this.sortDirection,this.naturalSorting)),e.addAssociation("order"),e.addAssociation("paymentStateMachineState"),e.addAssociation("orderStateMachineState"),e.addFilter(R.equals("orderId",this.orderId)),this.isLoading=!0,this.transactionLogRepository.search(e).then(e=>{e.forEach((t,n)=>{void 0===t.order&&(e[n].order={orderNumber:""}),void 0===t.paymentStateMachineState&&(e[n].paymentStateMachineState={name:""}),void 0===t.orderStateMachineState&&(e[n].orderStateMachineState={name:""})}),this.transactionLogs=e,window.a=e,this.isLoading=!1}).catch(()=>{this.isLoading=!1})},onOpenModalDetail(e){this.showTransactionLogDetailModal=e},onCloseModalDetail(){this.showTransactionLogDetailModal=!1},getVariantState(e,t){if(t)return this.stateStyleDataProviderService.getStyle(`${e}.state`,t.technicalName).variant;console.log(t)}},destroyed(){this.$root.$off("refund-finish")},computed:{...T("swOrderDetail",["order","versionContext","orderAddressIds","editing","loading"]),orderId(){return this.$route.params.id},transactionLogRepository(){return this.repositoryFactory.create("twint_transaction_log")},totalTransactionLogs(){return this.transactionLogs.length},transactionLogColumns(){let e=S.getApplicationRoot();return e?[{property:"orderId",label:e.$tc("twint.order.transactionLog.list.columns.orderID"),allowResize:!0},{property:"apiMethod",label:e.$tc("twint.order.transactionLog.list.columns.apiMethod"),allowResize:!0},{property:"soapAction",label:e.$tc("twint.order.transactionLog.list.columns.soapAction"),allowResize:!0},{property:"paymentStateId",label:e.$tc("twint.order.transactionLog.list.columns.payment"),allowResize:!0,sortable:!1},{property:"orderStateId",label:e.$tc("twint.order.transactionLog.list.columns.order"),allowResize:!0,align:"center"},{property:"createdAt",label:e.$tc("twint.order.transactionLog.list.columns.createdAt"),allowResize:!0}]:[]},dateFilter(){return Shopware.Filter.getByName("date")}}});let{Module:C}=Shopware;C.register("twint-sw-order-detail",{type:"plugin",name:"twint",title:"twint.name",description:"twint.pluginDescription",version:"1.0.0",targetVersion:"1.0.0",color:"#333",icon:"default-action-settings",routeMiddleware(e,t){"sw.order.detail"===t.name&&t.children.push({name:"sw.order.detail.twint",path:"/sw/order/detail/:id/twint",component:"sw-order-detail-twint",meta:{parentPath:"sw.order.index"}}),e(t)}}),c(163)}()})();