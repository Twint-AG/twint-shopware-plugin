(function(){var t,e,n,r,i,a,o,s,l={423:function(){},52:function(){},616:function(){},711:function(t,e,n){Shopware.Component.register("twint-payment-plugin-icon",()=>n.e(118).then(n.bind(n,118))),Shopware.Component.register("twint-settings",()=>n.e(863).then(n.bind(n,863))),Shopware.Component.register("express-settings",()=>n.e(423).then(n.bind(n,518))),Shopware.Module.register("twint-payment",{type:"plugin",name:"TwintPayment",title:"twint.title",description:"twint.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",icon:"regular-cog",routeMiddleware(t,e){t(e)},routes:{index:{component:"twint-settings",path:"index",meta:{parentPath:"sw.settings.index.plugins"}},express:{component:"express-settings",path:"express",meta:{parentPath:"sw.settings.index.plugins"}}},settingsItem:[{name:"twint-payment-express",to:"twint.payment.express",label:"twint.express.menuItem",group:"plugins",iconComponent:"twint-payment-plugin-icon",backgroundEnabled:!1},{name:"twint-payment",to:"twint.payment.index",label:"twint.general.menuItem",group:"plugins",iconComponent:"twint-payment-plugin-icon",backgroundEnabled:!1}]})},42:function(){let{Criteria:t}=Shopware.Data;Shopware.Component.override("sw-order-detail-details",{inject:["repositoryFactory","acl"],data(){return{customFieldSets:[]}},methods:{createdComponent(){this.$super("createdComponent"),this.customFieldSetRepository.search(this.customFieldSetCriteria).then(t=>{this.customFieldSets=t})}},computed:{customFieldSetRepository(){return this.repositoryFactory.create("custom_field_set")},customFieldSetCriteria(){let e=new t(1,null);return e.addFilter(t.not("AND",[t.equals("name","twint_payment_custom_field_set")])),e.addFilter(t.equals("relations.entityName","order")),e}}})},613:function(){let{Component:t,Mixin:e}=Shopware;t.extend("twint-merchant-id","sw-text-field",{mixins:[e.getByName("notification")],methods:{onChange(t){this.$super("onChange",t),this.isValidUUIDv4(t.target.value)||this.createNotificationError({title:this.$tc("twint.settings.merchantId.error.title"),message:this.$tc("twint.settings.merchantId.error.invalidFormat")})},isValidUUIDv4(t){return/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(t)}}})},235:function(t,e,n){var r=n(423);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[t.id,r,""]]),r.locals&&(t.exports=r.locals),n(346).Z("2d9d6b0c",r,!0,{})},905:function(t,e,n){var r=n(52);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[t.id,r,""]]),r.locals&&(t.exports=r.locals),n(346).Z("b343ab88",r,!0,{})},737:function(t,e,n){var r=n(616);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[t.id,r,""]]),r.locals&&(t.exports=r.locals),n(346).Z("248de319",r,!0,{})},346:function(t,e,n){"use strict";function r(t,e){for(var n=[],r={},i=0;i<e.length;i++){var a=e[i],o=a[0],s={id:t+":"+i,css:a[1],media:a[2],sourceMap:a[3]};r[o]?r[o].parts.push(s):n.push(r[o]={id:o,parts:[s]})}return n}n.d(e,{Z:function(){return h}});var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a={},o=i&&(document.head||document.getElementsByTagName("head")[0]),s=null,l=0,d=!1,c=function(){},u=null,p="data-vue-ssr-id",m="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function h(t,e,n,i){d=n,u=i||{};var o=r(t,e);return w(o),function(e){for(var n=[],i=0;i<o.length;i++){var s=a[o[i].id];s.refs--,n.push(s)}e?w(o=r(t,e)):o=[];for(var i=0;i<n.length;i++){var s=n[i];if(0===s.refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete a[s.id]}}}}function w(t){for(var e=0;e<t.length;e++){var n=t[e],r=a[n.id];if(r){r.refs++;for(var i=0;i<r.parts.length;i++)r.parts[i](n.parts[i]);for(;i<n.parts.length;i++)r.parts.push(g(n.parts[i]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{for(var o=[],i=0;i<n.parts.length;i++)o.push(g(n.parts[i]));a[n.id]={id:n.id,refs:1,parts:o}}}}function f(){var t=document.createElement("style");return t.type="text/css",o.appendChild(t),t}function g(t){var e,n,r=document.querySelector("style["+p+'~="'+t.id+'"]');if(r){if(d)return c;r.parentNode.removeChild(r)}if(m){var i=l++;e=b.bind(null,r=s||(s=f()),i,!1),n=b.bind(null,r,i,!0)}else e=v.bind(null,r=f()),n=function(){r.parentNode.removeChild(r)};return e(t),function(r){r?(r.css!==t.css||r.media!==t.media||r.sourceMap!==t.sourceMap)&&e(t=r):n()}}var _=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}();function b(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=_(e,i);else{var a=document.createTextNode(i),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(a,o[e]):t.appendChild(a)}}function v(t,e){var n=e.css,r=e.media,i=e.sourceMap;if(r&&t.setAttribute("media",r),u.ssrId&&t.setAttribute(p,e.id),i&&(n+="\n/*# sourceURL="+i.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},d={};function c(t){var e=d[t];if(void 0!==e)return e.exports;var n=d[t]={id:t,exports:{}};return l[t](n,n.exports,c),n.exports}c.m=l,c.d=function(t,e){for(var n in e)c.o(e,n)&&!c.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},c.f={},c.e=function(t){return Promise.all(Object.keys(c.f).reduce(function(e,n){return c.f[n](t,e),e},[]))},c.u=function(t){return"static/js/"+({118:"e0e016f47b8dfe3603f7",423:"f0c0d45c010d678a42ca",863:"bac4b8008c00bccdcc43"})[t]+".js"},c.miniCssF=function(t){return"static/css/"+(736===t?"twint-payment":t)+".css"},c.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},t={},e="administration:",c.l=function(n,r,i,a){if(t[n]){t[n].push(r);return}if(void 0!==i)for(var o,s,l=document.getElementsByTagName("script"),d=0;d<l.length;d++){var u=l[d];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==e+i){o=u;break}}o||(s=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,c.nc&&o.setAttribute("nonce",c.nc),o.setAttribute("data-webpack",e+i),o.src=n),t[n]=[r];var p=function(e,r){o.onerror=o.onload=null,clearTimeout(m);var i=t[n];if(delete t[n],o.parentNode&&o.parentNode.removeChild(o),i&&i.forEach(function(t){return t(r)}),e)return e(r)},m=setTimeout(p.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=p.bind(null,o.onerror),o.onload=p.bind(null,o.onload),s&&document.head.appendChild(o)},c.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},c.p="bundles/twintpayment/",n=function(t,e,n,r){var i=document.createElement("link");return i.rel="stylesheet",i.type="text/css",i.onerror=i.onload=function(a){if(i.onerror=i.onload=null,"load"===a.type)n();else{var o=a&&("load"===a.type?"missing":a.type),s=a&&a.target&&a.target.href||e,l=Error("Loading CSS chunk "+t+" failed.\n("+s+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=o,l.request=s,i.parentNode.removeChild(i),r(l)}},i.href=e,document.head.appendChild(i),i},r=function(t,e){for(var n=document.getElementsByTagName("link"),r=0;r<n.length;r++){var i=n[r],a=i.getAttribute("data-href")||i.getAttribute("href");if("stylesheet"===i.rel&&(a===t||a===e))return i}for(var o=document.getElementsByTagName("style"),r=0;r<o.length;r++){var i=o[r],a=i.getAttribute("data-href");if(a===t||a===e)return i}},i={736:0},c.f.miniCss=function(t,e){i[t]?e.push(i[t]):0!==i[t]&&({118:1})[t]&&e.push(i[t]=new Promise(function(e,i){var a=c.miniCssF(t),o=c.p+a;if(r(a,o))return e();n(t,o,e,i)}).then(function(){i[t]=0},function(e){throw delete i[t],e}))},a={736:0},c.f.j=function(t,e){var n=c.o(a,t)?a[t]:void 0;if(0!==n){if(n)e.push(n[2]);else{var r=new Promise(function(e,r){n=a[t]=[e,r]});e.push(n[2]=r);var i=c.p+c.u(t),o=Error();c.l(i,function(e){if(c.o(a,t)&&(0!==(n=a[t])&&(a[t]=void 0),n)){var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;o.message="Loading chunk "+t+" failed.\n("+r+": "+i+")",o.name="ChunkLoadError",o.type=r,o.request=i,n[1](o)}},"chunk-"+t,t)}}},o=function(t,e){var n,r,i=e[0],o=e[1],s=e[2],l=0;if(i.some(function(t){return 0!==a[t]})){for(n in o)c.o(o,n)&&(c.m[n]=o[n]);s&&s(c)}for(t&&t(e);l<i.length;l++)r=i[l],c.o(a,r)&&a[r]&&a[r][0](),a[r]=0},(s=window["webpackJsonpPlugintwint-payment"]=window["webpackJsonpPlugintwint-payment"]||[]).forEach(o.bind(null,0)),s.push=o.bind(null,s.push.bind(s)),window?.__sw__?.assetPath&&(c.p=window.__sw__.assetPath+"/bundles/twintpayment/"),function(){"use strict";var t=JSON.parse('{"twint":{"title":"TWINT-Anmeldeinformationen","express":{"title":"TWINT Express Checkout","menuItem":"TWINT Express Checkout"},"general":{"menuItem":"TWINT-Anmeldeinformationen","descriptionTextModule":"TWINT ist eine Schweizer Bezahl-App, mit der Sie in Gesch\xe4ften, online und Geld an Freunde und Familie \xfcberweisen k\xf6nnen."},"settings":{"button":{"save":"Speichern","testing":"Anmeldeinformationen werden \xfcberpr\xfcft ..."},"testCredentials":{"error":{"title":"Anmeldeinformationen ung\xfcltig","message":"Die Anmeldeinformationen sind ung\xfcltig. Bitte \xfcberpr\xfcfen Sie die H\xe4ndler-ID, das Zertifikat und die Umgebung (Modus)."}},"merchantId":{"label":"H\xe4ndler-ID","placeholder":"Geben Sie Ihre H\xe4ndler-ID ein","helpText":"Die von TWINT bereitgestellte H\xe4ndler-ID","error":{"title":"H\xe4ndler-ID","invalidFormat":"Die H\xe4ndler-ID hat ein ung\xfcltiges Format. Muss eine UUIDv4 sein","required":"H\xe4ndler-ID ist erforderlich"}},"certificate":{"placeholder":"W\xe4hlen Sie eine Zertifikatsdatei (.p12)","error":{"title":"Zertifikatsfehler","message":"Beim Lesen des Zertifikats ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut.","general":"Beim Lesen des Zertifikats ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut.","required":"Zertifikatsdatei ist erforderlich","ERROR_INVALID_INPUT":"Zertifikatsdatei und Passwort sind erforderlich","ERROR_INVALID_UNKNOWN":"Bei der Zertifikatsvalidierung ist etwas schiefgelaufen. Bitte versuchen Sie es erneut.","ERROR_INVALID_CERTIFICATE_FORMAT":"Ung\xfcltiges Zertifikatsformat","ERROR_INVALID_PASSPHRASE":"Ung\xfcltiges Passwort","ERROR_INVALID_ISSUER_COUNTRY":"Ung\xfcltiges Herkunftsland des Ausstellers","ERROR_INVALID_ISSUER_ORGANIZATION":"Ung\xfcltige Herkunftsorganisation des Ausstellers","ERROR_INVALID_EXPIRY_DATE":"Ung\xfcltiges Ablaufdatum","ERROR_CERTIFICATE_EXPIRED":"Zertifikat abgelaufen","ERROR_CERTIFICATE_NOT_YET_VALID":"Zertifikat noch nicht g\xfcltig"},"success":{"title":"Zertifikat erfolgreich","message":"Zertifikat wurde erfolgreich gelesen"},"password":{"label":"Zertifikatspasswort","helpText":"Das Passwort f\xfcr die Zertifikatsdatei "}}},"order":{"stateCard":{"label":"Zahlung wurde von TWINT verarbeitet","showTransactionLogModal":"Transaktionsprotokolle anzeigen"},"transactionLog":{"cardTitle":"Transaktionen","list":{"title":"Transaktionen","columns":{"createdAt":"Created at","apiMethod":"API method","soapAction":"SOAP action","orderID":"Order ID","order":"Bestellen","transaction":"Order transaction ID","request":"Anfrage","response":"Antwort","soapRequest":"Anfrage","soapResponse":"Antwort","exception":"Ausnahme","payment":"Zahlung","action":{"view":"Details anzeigen"}},"modal":{"title":"TWINT Transaktionen","close":"Schlie\xdfen","soapMethod":"SOAP method"}}},"reversalHistory":{"cardTitle":"Stornierungsverlauf","columns":{"amount":"Betrag","currency":"W\xe4hrung","reason":"Grund","createdAt":"Erstellt"}},"refundAction":{"cardTitle":"R\xfcckerstattungs","reason":{"label":"Grund","placeholder":"Geben Sie den Grund f\xfcr die R\xfcckerstattung ein"},"refundAmount":{"label":"Betrag","helpText":"The refund amount cannot exceed the total order amount"},"confirmButton":{"text":"Ausf\xfchren"}}}},"refund":{"modal":{"title":"Create new refund"},"buttons":{"refund":{"label":"R\xfcckerstattung"}},"refundable":{"title":"Verbleibender Gesamtbetrag der R\xfcckerstattung","notice":"Gesamtbetrag wird automatisch an den maximalen Bestellpreis angepasst.","fullRefundNotice":"No refundable amount left for this order"},"error":{"title":"R\xfcckerstattungsfehler"}},"sw-order":{"detail":{"twint":"TWINT"}}}'),e=JSON.parse('{"twint":{"name":"TWINT payment","title":"TWINT payment","express":{"title":"TWINT Express Checkout","menuItem":"TWINT Express Checkout"},"general":{"menuItem":"TWINT Credentials","descriptionTextModule":"TWINT is a Swiss payment app that allows you to pay in stores and online shops digitally and cashlessly"},"settings":{"button":{"save":"Save","testing":"Verifying credentials ..."},"testCredentials":{"error":{"title":"Credential Error","message":"Invalid credentials. Please check again: Merchant ID, certificate and environment (mode)"}},"merchantId":{"label":"Merchant ID","placeholder":"Enter your Merchant ID","helpText":"The Merchant ID is provided by TWINT","error":{"title":"Merchant ID","invalidFormat":"Invalid Merchant ID. Merchant ID needs to be a UUIDv4","required":"Merchant ID is required"}},"certificate":{"placeholder":"Upload a certificate file (.p12)","error":{"title":"Invalid Certificate","message":"An error occurred reading the certificate. Please try again ","general":"An error occurred reading the certificate. Please try again","required":"Certificate file is required","ERROR_INVALID_INPUT":"Certificate file and password are required","ERROR_INVALID_UNKNOWN":"Certificate cannot be validated. Please try again","ERROR_INVALID_CERTIFICATE_FORMAT":"Invalid certificate format","ERROR_INVALID_PASSPHRASE":"Invalid passphrase","ERROR_INVALID_ISSUER_COUNTRY":"Invalid issuer country","ERROR_INVALID_ISSUER_ORGANIZATION":"Invalid issuer organization","ERROR_INVALID_EXPIRY_DATE":"Invalid expiry date","ERROR_CERTIFICATE_EXPIRED":"Certificate expired","ERROR_CERTIFICATE_NOT_YET_VALID":"Certificate is not yet valid"},"success":{"title":"Certificate validation successful","message":"Your certificate is successfully validated"},"password":{"label":"Certificate Password","helpText":"Please enter the password for the certificate"}}},"order":{"stateCard":{"label":"Payment has been processed by TWINT","showTransactionLogModal":"Show transaction logs"},"transactionLog":{"cardTitle":"Transaction logs","list":{"title":"Transactions","columns":{"createdAt":"Created at","apiMethod":"API method","soapAction":"SOAP action","orderID":"Order ID","order":"Order status","transaction":"Order transaction ID","request":"Request","response":"Response","soapRequest":"Request","soapResponse":"Response","exception":"Exception","payment":"Payment status","action":{"view":"View details"}},"modal":{"title":"TWINT Transaction log","close":"Close","soapMethod":"SOAP method"}}},"reversalHistory":{"cardTitle":"Refund history","columns":{"amount":"Amount","currency":"Currency","reason":"Reason","createdAt":"Created at"}},"refundAction":{"cardTitle":"Refund","reason":{"label":"Reason","placeholder":"Add note to this refund"},"refundAmount":{"label":"Amount","helpText":"The refund amount cannot exceed the total order amount"},"confirmButton":{"text":"Refund"}}},"refund":{"modal":{"title":"Create new refund"},"buttons":{"refund":{"label":"Refund"}},"refundable":{"title":"Total refundable amount left","notice":"Total amount automatically adjusted to the maximum order price.","fullRefundNotice":"No refundable amount left for this order"},"error":{"title":"Refund error"}}},"sw-order":{"detail":{"twint":"TWINT"}}}');Shopware.Locale.extend("de-DE",t),Shopware.Locale.extend("en-GB",e);let n=Shopware.Classes.ApiService;class r extends n{constructor(t,e,n="twint"){super(t,e,n)}uploadFile(t,e){let n=this.getBasicHeaders();n["Content-Type"]="multipart/form-data";let r=new FormData;return r.append("file",t),r.append("password",e),this.httpClient.post("_actions/twint/extract-pem",r,{headers:n})}}let i=Shopware.Classes.ApiService;class a extends i{constructor(t,e,n="twint"){super(t,e,n)}validateCredential(t){let e=this.getBasicHeaders();return this.httpClient.post("_actions/twint/validate-api-credential",t,{headers:e}).then(t=>i.handleResponse(t))}}let o=Shopware.Classes.ApiService;class s extends o{constructor(t,e,n="twint"){super(t,e,n)}refund(t){let e=this.getBasicHeaders();return this.httpClient.post("_actions/twint/refund",t,{headers:e}).then(t=>o.handleResponse(t))}orderStatus(t){let e=this.getBasicHeaders();return this.httpClient.get(`_actions/twint/order/${t}/status`,{headers:e}).then(t=>o.handleResponse(t))}}let{Application:l}=Shopware,d=l.getContainer("init").httpClient,u=Shopware.Service("loginService");l.addServiceProvider("twintFileUploadService",()=>new r(d,u)),l.addServiceProvider("TwintPaymentSettingsService",t=>new a(d,u)),l.addServiceProvider("TwintPaymentService",t=>new s(d,u)),c(905);let{Component:p,Mixin:m}=Shopware,{ShopwareError:h}=Shopware.Classes;p.register("twint-certificate",{template:Shopware.Feature.isActive("v6.6.0.0")?'{% block twint_certificate_block %}\n    <div>\n        <sw-file-input\n                v-model="currentCertFile"\n                :allowed-mime-types="[\'application/x-pkcs12\']"\n                :maxFileSize="8*1024*1024"\n                @update:value="onFileChange"\n                required\n        >\n            <template #caption-label>\n                {{ $tc(\'twint.settings.certificate.placeholder\') }}\n            </template>\n        </sw-file-input>\n\n        <sw-password-field\n                v-model:value="currentPassword"\n                :entity-collection="null"\n                :error="passwordError"\n                class="twint-config-field"\n                :label="$tc(\'twint.settings.certificate.password.label\')"\n                :help-text="$tc(\'twint.settings.certificate.password.helpText\')"\n                @blur="updatePassword"\n                required\n        >\n            <template #suffix>\n                {% block twint_certificate_password_suffix_block %}\n                    <sw-icon name="regular-low-vision" size="22px"></sw-icon>\n                {% endblock %}\n            </template>\n        </sw-password-field>\n    </div>\n{% endblock %}\n':'{% block twint_certificate_block %}\n    <div>\n        <sw-file-input\n                v-model="currentCertFile"\n                :allowed-mime-types="[\'application/x-pkcs12\']"\n                :maxFileSize="8*1024*1024"\n                @change="onFileChange"\n                required\n        >\n            <template #caption-label>\n                {{ $tc(\'twint.settings.certificate.placeholder\') }}\n            </template>\n        </sw-file-input>\n\n        <sw-password-field\n                v-model:value="currentPassword"\n                :entity-collection="null"\n                :error="passwordError"\n                class="twint-config-field"\n                :label="$tc(\'twint.settings.certificate.password.label\')"\n                :help-text="$tc(\'twint.settings.certificate.password.helpText\')"\n                @blur="updatePassword"\n                required>\n            <template #suffix>\n                {% block twint_certificate_password_suffix_block %}\n                    <sw-icon name="regular-low-vision" size="22px"></sw-icon>\n                {% endblock %}\n            </template>\n        </sw-password-field>\n    </div>\n{% endblock %}\n',mixins:[m.getByName("notification")],inject:["feature"],data(){return{currentPassword:null,currentCertFile:null,passwordError:null,validatePassword:""}},methods:{onFileChange(t){if(this.currentCertFile=t,this.currentCertFile&&(!this.currentPassword||0===this.currentPassword.length)){this.passwordError=new h({code:"c1051bb4-d103-4f74-8988-acbcafc7fdc3"}),this.$root.$emit("update-lock",!0);return}if(!this.currentCertFile){this.passwordError=null,this.$root.$emit("update-lock",!1);return}this.extractPem()},updatePassword(t){this.currentCertFile&&(!this.currentPassword||0===this.currentPassword.length)?(this.passwordError=new h({code:"c1051bb4-d103-4f74-8988-acbcafc7fdc3"}),this.$root.$emit("update-lock",!0)):this.currentCertFile&&(this.passwordError=null,this.extractPem())},extractPem(){let t=Shopware.Service("twintFileUploadService");this.currentCertFile&&this.currentPassword&&0!==this.currentPassword.length&&t.uploadFile(this.currentCertFile,this.currentPassword??"").then(t=>{this.updateCertificate(t.data.data),this.createNotification({title:this.$tc("twint.settings.certificate.success.title"),message:this.$tc("twint.settings.certificate.success.message"),growl:!0}).then(t=>{this.$root.$emit("update-lock",!1)})}).catch(t=>{if(400===t.response.status){let e=t.response.data.errorCode;return this.createNotificationError({title:this.$tc("twint.settings.certificate.error.title"),message:this.$tc("twint.settings.certificate.error."+e),growl:!0})}this.createNotificationError({title:this.$tc("twint.settings.certificate.error.title"),message:this.$tc("twint.settings.certificate.error.general"),growl:!0})})},updateCertificate(t){if(this.feature.isActive("v6.6.0.0")){this.$emit("update:value",t);return}this.$emit("input",t)}}}),c(613),c(711),c(737);let{Component:w,Mixin:f}=Shopware,{mapState:g}=Shopware.Component.getComponentHelper(),{Criteria:_}=Shopware.Data;w.register("twint-payment-actions",{template:'<div class="sw-order-detail-twint">\n    <sw-container>\n        {% block sw_order_detail_twint_actions_row_reversal_form %}\n            <sw-card  v-if="canRefund" position-identifier="twint-details-actions" :title="$tc(\'twint.order.refundAction.cardTitle\')">\n                {% block sw_order_detail_twint_actions_rows %}\n                    <template #default>\n                        {% block sw_order_detail_twint_actions_row_primary %}\n                            <div class="twint-payment-actions__button-container">\n                                <span class="twint-refundable-amount__title" v-if="refundableAmount > 0">\n                                {{ $tc(\'twint.refund.refundable.title\') }}\n                                </span>\n                                <span class="twint-refundable-amount__notice" v-if="refundableAmount == 0">\n                                {{ $tc(\'twint.refund.refundable.fullRefundNotice\') }}\n                                </span>\n                                <sw-label v-if="refundableAmount > 0">{{ currencyFilter(refundableAmount, currency, decimalPrecision) }}</sw-label>\n                                <sw-button variant="primary"\n                                           size="small"\n                                           :disabled="refundableAmount==0 || !acl.can(\'order.editor\')"\n                                           @click="showModal">\n                                    {{ $tc(\'twint.refund.buttons.refund.label\') }}\n                                </sw-button>\n                            </div>\n                            {% block twint_modal_refund %}\n                                <sw-modal variant="small"\n                                          :title="$tc(`twint.refund.modal.title`)" v-if="showRefundModal" @modal-close="onCloseModal">\n                                    <sw-alert class="twint-refundable-amount__notice-message" v-if="refundableAmount==refundAmount" variant="warning">\n                                        <span>{{ $tc(\'twint.refund.refundable.notice\') }}</span>\n                                    </sw-alert>\n\n                                    {% block twint_refund_amount %}\n                                        <sw-number-field\n                                                v-model:value="refundAmount"\n                                                :max="refundableAmount"\n                                                :min="0"\n                                                numberType="float"\n                                                :step="dynamicStep"\n                                                :label="$tc(\'twint.order.refundAction.refundAmount.label\')"\n                                                :helpText="$tc(\'twint.order.refundAction.refundAmount.helpText\')">\n                                            <template #suffix>\n                                                {{ currency }}\n                                            </template>\n                                        </sw-number-field>\n                                    {% endblock %}\n\n                                    {% block twint_refund_reason %}\n                                        <sw-textarea-field\n                                                v-model:value="reason"\n                                                maxLength="127"\n                                                :label="$tc(\'twint.order.refundAction.reason.label\')"\n                                                :placeholder="$tc(\'twint.order.refundAction.reason.placeholder\')">\n                                        </sw-textarea-field>\n                                    {% endblock %}\n\n                                    {% block twint_refund_confirm_button %}\n                                        <template #modal-footer>\n                                            <sw-button variant="primary"\n                                                       @click="refund">\n                                                {{ $tc(\'twint.order.refundAction.confirmButton.text\') }}\n                                            </sw-button>\n                                        </template>\n                                    {% endblock %}\n\n                                    <sw-loader v-if="isLoading"></sw-loader>\n                                </sw-modal>\n                            {% endblock %}\n                        {% endblock %}\n                    </template>\n                {% endblock %}\n            </sw-card>\n        {% endblock %}\n        {% block sw_order_detail_twint_actions_row_reversal_history %}\n            <sw-card position-identifier="twint-details-actions-reversal-list" :title="$tc(\'twint.order.reversalHistory.cardTitle\')">\n                <template #grid>\n                    {% block sw_order_detail_twint_reversal_history_grid %}\n                        <sw-data-grid v-if="reversalHistory.length > 0" :data-source="reversalHistory"\n                                      :columns="paymentColumns"\n                                      :showActions="false"\n                                      :showSelection="false">\n                            <template #column-createdAt="{ item }">\n                                {{ dateFilter(item.createdAt) }}\n                            </template>\n                            <template #column-amount="{ item }">\n                                {{ currencyFilter(item.amount, item.currency, decimalPrecision)}}\n                            </template>\n                        </sw-data-grid>\n                    {% endblock %}\n                </template>\n            </sw-card>\n        {% endblock %}\n    </sw-container>\n</div>\n',inject:["repositoryFactory","acl","TwintPaymentService","orderStateMachineService"],mixins:[f.getByName("notification"),f.getByName("sw-inline-snippet")],props:{order:{type:Object,required:!0},orderId:{type:String,required:!0},totalAmount:{type:Number,required:!0},currency:{type:String,required:!0},decimalPrecision:{type:String,required:!0}},data(){return{reversalId:"",reversalHistory:[],refundAmount:0,totalOrderAmount:0,refundedAmount:0,reason:"",refundableAmount:0,isLoading:!1,showRefundModal:!1,sortBy:"createdAt",sortDirection:"DESC",naturalSorting:!0,stateType:"order_transaction",transaction:null,currentActionName:null}},created(){this.createdComponent()},computed:{...g("swOrderDetail",["order","versionContext","orderAddressIds","editing","loading"]),reversalHistoryRepository(){return this.repositoryFactory.create("twint_reversal_history")},paymentColumns(){return[{property:"amount",label:this.$tc("twint.order.reversalHistory.columns.amount"),rawData:!0},{property:"reason",label:this.$tc("twint.order.reversalHistory.columns.reason"),rawData:!0},{property:"createdAt",label:this.$tc("twint.order.reversalHistory.columns.createdAt"),rawData:!0}]},dateFilter(){return Shopware.Filter.getByName("date")},canRefund(){for(let t=0;t<this.order.transactions.length;t+=1)if(["paid","paid_partially","refunded_partially","refunded"].includes(this.order.transactions[t].stateMachineState.technicalName))return!0;return!1},currencyFilter(){return Shopware.Filter.getByName("currency")},dynamicStep(){return this.decimalPrecision<0?.01:Math.pow(10,-this.decimalPrecision)}},methods:{createdComponent(){this.getReversalHistoryList();for(let t=0;t<this.order.transactions.length;t+=1)["cancelled","failed"].includes(this.order.transactions[t].stateMachineState.technicalName)||(this.transaction=this.order.transactions[t]);this.transaction=this.order.transactions.last();let t=JSON.parse((this.order?.customFields||{}).twint_api_response||"{}");this.totalOrderAmount=this.totalAmount,t?.amount&&(this.totalOrderAmount=t.amount.amount)},showModal(){this.showRefundModal=!0},closeModal(){this.showRefundModal=""},onCloseModal(){this.showRefundModal=""},getReversalHistoryList(){this.naturalSorting="createdAt"===this.sortBy;let t=new _;t.addSorting(_.sort(this.sortBy,this.sortDirection,this.naturalSorting)),t.addFilter(_.equals("order.id",this.orderId)),t.addAggregation(_.sum("refundedAmount","amount")),this.isLoading=!0,this.reversalHistoryRepository.search(t).then(t=>{this.reversalHistory=t;let e=parseFloat(t?.aggregations?.refundedAmount?.sum);this.isLoading=!1,this.refundableAmount=this.roundingFloat(this.totalOrderAmount-e,this.decimalPrecision)}).catch(()=>{this.isLoading=!1})},refund(){let t={orderId:this.orderId,amount:this.refundAmount,reason:this.reason};this.isLoading=!0,this.TwintPaymentService.refund(t).then(t=>{let e=t.success??!1;this.currentActionName=t.action??"",e?(this.showRefundModal=!1,this.getReversalHistoryList(),this.isLoading=!1,this.resetRefundForm(),this.$root.$emit("refund-finish"),this.updatePaymentStatus()):(this.isLoading=!1,this.createNotificationError({title:this.$tc("twint.refund.error.title"),message:t.error}))}).finally(t=>{this.isLoading=!1,this.showRefundModal=!1})},resetRefundForm(){this.refundAmount=0,this.reason=""},roundingFloat(t,e=2){return Number(Number(t).toFixed(e))},updatePaymentStatus(t=[],e=!1){if(this.currentActionName){let n=this.orderStateMachineService.transitionOrderTransactionState(this.transaction.id,this.currentActionName,{documentIds:t,sendMail:e});n&&n.then(()=>{this.TwintPaymentService.orderStatus(this.orderId).then(t=>{t.success&&(this.$root.$emit("save-edits"),this.$root.$emit("refund-finish"))})}).catch(t=>{this.createNotificationError({title:this.$tc("twint.refund.error.title"),message:t})}).finally(()=>{this.currentActionName=null})}}}});let{Criteria:b}=Shopware.Data;Shopware.Component.override("sw-order-detail",{template:'{% block sw_order_detail_content_tabs_extension %}\n    {% parent %}\n    <sw-tabs-item\n            v-if="isTwintOrder"\n            class="sw-order-detail__tab-twint"\n            :route="{ name: \'sw.order.detail.twint\', params: { id: $route.params.id } }"\n            :title="$tc(\'sw-order.detail.twint\')">\n        {{ $tc(\'sw-order.detail.twint\') }}\n    </sw-tabs-item>\n{% endblock %}',data(){return{isLoading:!1,pairings:null,sortBy:"createdAt",sortDirection:"DESC",naturalSorting:!0}},methods:{createdComponent(){this.$super("createdComponent"),this.isLoading=!0,this.getPairingList(),this.$root.$on("save-edits",this.onSaveEdits)},getPairingList(){this.naturalSorting="createdAt"===this.sortBy;let t=new b;t.addSorting(b.sort(this.sortBy,this.sortDirection,this.naturalSorting)),t.addAssociation("order"),t.addFilter(b.equals("order.id",this.orderId)),this.isLoading=!0,this.twintPairingRepository.search(t).then(t=>{this.pairings=t,this.isLoading=!1}).catch(()=>{this.isLoading=!1})},async onSaveEdits(){return await this.$super("onSaveEdits")}},destroyed(){this.$root.$off("save-edits")},computed:{twintPairingRepository(){return this.repositoryFactory.create("twint_pairing")},isTwintOrder(){for(let t of this.order?.transactions??[])if(t.paymentMethod.handlerIdentifier.includes("Twint"))return!0;return!1}}}),c(42),c(235);let{Application:v,Mixin:y}=Shopware,{Criteria:S}=Shopware.Data,{mapState:A,mapGetters:I}=Shopware.Component.getComponentHelper();Shopware.Component.register("sw-order-detail-twint",{template:'{% block sw_order_detail_twint %}\n    <div class="sw-order-twint-detail">\n    <template>\n        <sw-card-view>\n            {% block sw_order_detail_twint_reversal_card %}\n                <twint-payment-actions\n                        :order="order"\n                        :orderId="orderId"\n                        :currency="order.currency.isoCode"\n                        :decimalPrecision="order.itemRounding.decimals"\n                        :totalAmount="order.amountTotal"\n                >\n                </twint-payment-actions>\n            {% endblock %}\n            {% block sw_order_detail_twint_transaction_log_card_grid %}\n                <sw-card :title="$tc(\'twint.order.transactionLog.cardTitle\')" class="twint-transaction-log" position-identifier="sw-order-detail-twint">\n                    <template\n                            v-if="(transactionLogs && transactionLogs.total > 0)"\n                            #grid\n                    >\n                        {% block twint_transaction_log_list_content %}\n                            <sw-entity-listing\n                                    class="twint-transaction-logs-grid"\n                                    v-if="transactionLogs"\n                                    :items="transactionLogs"\n                                    :repository="transactionLogRepository"\n                                    :columns="transactionLogColumns"\n                                    :sort-by="sortBy"\n                                    :sort-direction="sortDirection"\n                                    :showSelection="false"\n                                    :allowDelete="false"\n                                    :showDelete="false"\n                                    :isLoading="isLoading"\n                                    @on-add-new-refund="getTransactionLogList">\n\n                                {% block twint_transaction_log_list_content_order %}\n                                    <template #column-orderId="{ item }">\n                                        {{ item.orderId }}\n                                    </template>\n                                {% endblock %}\n\n                                {% block twint_transaction_log_list_content_api_method %}\n                                    <template #column-apiMethod="{ item }">\n                                        <sw-label>{{ item.apiMethod }}</sw-label>\n                                    </template>\n                                {% endblock %}\n\n                                {% block twint_transaction_log_list_content_soap_action %}\n                                    <template #column-soapAction="{ item }">\n                                        <sw-label v-for="action in item.soapAction">{{ action }}</sw-label>\n                                    </template>\n                                {% endblock %}\n\n                                {% block twint_transaction_log_list_content_transaction %}\n                                    <template #column-transactionId="{ item }">\n                                        {{ item.transactionId }}\n                                    </template>\n                                {% endblock %}\n\n                                {% block twint_transaction_log_list_content_payment %}\n                                    <template #column-paymentStateId="{ item }">\n                                        {% if item.paymentStateMachineState %}\n                                            <sw-label :variant="getVariantState(\'order_transaction\', item.paymentStateMachineState)" appearance="badged">\n                                                {{ item.paymentStateMachineState.name }}\n                                            </sw-label>\n                                        {% endif %}\n                                    </template>\n                                {% endblock %}\n\n                                {% block twint_transaction_log_list_content_order %}\n                                    <template #column-orderStateId="{ item }">\n                                        {% if item.orderStateMachineState %}\n                                            <sw-label :variant="getVariantState(\'order\', item.orderStateMachineState)" appearance="badged">\n                                                {{ item.orderStateMachineState.name }}\n                                            </sw-label>\n                                        {% endif %}\n                                    </template>\n                                {% endblock %}\n\n                                {% block twint_transaction_log_list_content_created_at %}\n                                    <template #column-createdAt="{ item }">\n                                        {{ dateFilter(item.createdAt) }}\n                                    </template>\n                                {% endblock %}\n\n                                {% block twint_transaction_log_list_content_actions %}\n                                    <template #actions="{ item }">\n                                        {% block twint_transaction_log_list_content_actions_view %}\n                                            <sw-context-menu-item class="twint-transaction-log-grid-btn-view"\n                                                                  @click="onOpenModalDetail(item.id)">\n                                                {{ $tc(\'twint.order.transactionLog.list.columns.action.view\') }}\n                                            </sw-context-menu-item>\n                                        {% endblock %}\n                                    </template>\n                                {% endblock %}\n                                {% block twint_transaction_log_list_content_action_modals %}\n                                    <template #action-modals="{ item }">\n                                        {% block twint_transaction_log_list_content_action_detail_modal %}\n                                            <sw-modal\n                                                    v-if="showTransactionLogDetailModal === item.id"\n                                                    :title="$tc(\'twint.order.transactionLog.list.modal.title\')"\n                                                    variant="large"\n                                                    @modal-close="onCloseModalDetail"\n                                            >\n                                                <div class="sw-data-grid">\n                                                    <table class="sw-data-grid__table">\n                                                        <tbody class="sw-data-grid__body">\n                                                            <tr class="sw-data-grid__row">\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        <b>{{ $tc(\'twint.order.transactionLog.list.columns.orderID\') }}:</b>\n                                                                    </div>\n                                                                </td>\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content"> {{ item.order.orderNumber }}</div>\n                                                                </td>\n                                                            </tr>\n                                                            <tr class="sw-data-grid__row">\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        <b>{{ $tc(\'twint.order.transactionLog.list.columns.apiMethod\') }}:</b>\n                                                                    </div>\n                                                                </td>\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content"> {{ item.apiMethod }}</div>\n                                                                </td>\n                                                            </tr>\n                                                            <tr class="sw-data-grid__row">\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        <b>{{ $tc(\'twint.order.transactionLog.list.columns.transaction\') }}:</b>\n                                                                    </div>\n                                                                </td>\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content"> {{ item.transactionId }}</div>\n                                                                </td>\n                                                            </tr>\n                                                            <tr class="sw-data-grid__row">\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        <b>{{ $tc(\'twint.order.transactionLog.list.columns.payment\') }}:</b>\n                                                                    </div>\n                                                                </td>\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        <sw-label :variant="getVariantState(\'order_transaction\', item.paymentStateMachineState)" appearance="badged">\n                                                                            {{ item.paymentStateMachineState.name }}\n                                                                        </sw-label>\n                                                                    </div>\n                                                                </td>\n                                                            </tr>\n                                                            <tr class="sw-data-grid__row">\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        <b>{{ $tc(\'twint.order.transactionLog.list.columns.order\') }}:</b>\n                                                                    </div>\n                                                                </td>\n                                                                <td class="sw-data-grid__cell">\n                                                                    <div class="sw-data-grid__cell-content">\n                                                                        <sw-label :variant="getVariantState(\'order\', item.orderStateMachineState)" appearance="badged">\n                                                                            {{ item.orderStateMachineState.name }}\n                                                                        </sw-label>\n                                                                    </div>\n                                                                </td>\n                                                            </tr>\n                                                        </tbody>\n                                                    </table>\n                                                </div>\n                                                {% block twint_transaction_log_list_content_action_detail_modal_order %}\n                                                    <sw-card>\n                                                        <b class="sw-order-detail-twint-modal-soap-request">\n                                                            {{ $tc(\'twint.order.transactionLog.list.columns.request\') }}\n                                                        </b>\n                                                        <sw-textarea-field :disabled="true" :value="item.request" />\n                                                        <b class="sw-order-detail-twint-modal-soap-response">\n                                                            {{ $tc(\'twint.order.transactionLog.list.columns.response\') }}\n                                                        </b>\n                                                        <sw-textarea-field :disabled="true" :value="item.response"/>\n                                                        <div v-if="item.exception != \' \'">\n                                                            <p class="sw-order-detail-twint-modal-exception">\n                                                                <b>{{ $tc(\'twint.order.transactionLog.list.columns.exception\') }}</b>\n                                                            </p>\n                                                            <sw-textarea-field :disabled="true" :value="item.exception"/>\n                                                        </div>\n                                                    </sw-card>\n                                                    <sw-card v-for="(request, index) in item.soapRequest">\n                                                        <sw-container>\n                                                            <h4>{{ item.soapAction[index] }}</h4>\n                                                            <b class="sw-order-detail-twint-modal-soap-request">\n                                                                {{ $tc(\'twint.order.transactionLog.list.columns.soapRequest\') }}\n                                                            </b>\n                                                            <sw-textarea-field :disabled="true" :value="request"/>\n\n                                                            <b class="sw-order-detail-twint-modal-soap-response" v-if="item.soapResponse[index]">\n                                                                {{ $tc(\'twint.order.transactionLog.list.columns.soapResponse\') }}\n                                                            </b>\n                                                            <sw-textarea-field  v-if="item.soapResponse[index]" :disabled="true" :value="item.soapResponse[index]"/>\n                                                        </sw-container>\n                                                    </sw-card>\n                                                {% endblock %}\n\n                                                {% block twint_transaction_log_list_content_action_detail_modal_footer %}\n                                                    <template #modal-footer>\n                                                        {% block twint_transaction_log_list_content_action_detail_modal_close %}\n                                                            <sw-button size="small" @click="onCloseModalDetail">\n                                                                {{ $tc(\'twint.order.transactionLog.list.modal.close\') }}\n                                                            </sw-button>\n                                                        {% endblock %}\n                                                    </template>\n                                                {% endblock %}\n                                            </sw-modal>\n                                        {% endblock %}\n                                    </template>\n                                {% endblock %}\n                            </sw-entity-listing>\n                        {% endblock %}\n                    </template>\n                </sw-card>\n            {% endblock %}\n        </sw-card-view>\n    </template>\n    </div>\n{% endblock %}\n',mixins:[y.getByName("notification"),y.getByName("listing")],inject:["repositoryFactory","acl","stateStyleDataProviderService"],metaInfo(){return{title:this.$createTitle()}},data(){return{isLoading:!1,transactionLogs:null,refundedAmount:0,sortBy:"createdAt",sortDirection:"DESC",naturalSorting:!0,showTransactionLogDetailModal:!1}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!0,this.getTransactionLogList(),this.$root.$on("refund-finish",this.getTransactionLogList)},getTransactionLogList(){this.naturalSorting="createdAt"===this.sortBy;let t=new S;t.addSorting(S.sort(this.sortBy,this.sortDirection,this.naturalSorting)),t.addAssociation("order"),t.addAssociation("paymentStateMachineState"),t.addAssociation("orderStateMachineState"),t.addFilter(S.equals("orderId",this.orderId)),this.isLoading=!0,this.transactionLogRepository.search(t).then(t=>{this.transactionLogs=t,console.log(t),window.a=t,this.isLoading=!1}).catch(()=>{this.isLoading=!1})},onOpenModalDetail(t){this.showTransactionLogDetailModal=t},onCloseModalDetail(){this.showTransactionLogDetailModal=!1},getVariantState(t,e){return this.stateStyleDataProviderService.getStyle(`${t}.state`,e.technicalName).variant}},destroyed(){this.$root.$off("refund-finish")},computed:{...A("swOrderDetail",["order","versionContext","orderAddressIds","editing","loading"]),orderId(){return this.$route.params.id},transactionLogRepository(){return this.repositoryFactory.create("twint_transaction_log")},totalTransactionLogs(){return this.transactionLogs.length},transactionLogColumns(){let t=v.getApplicationRoot();return t?[{property:"orderId",label:t.$tc("twint.order.transactionLog.list.columns.orderID"),allowResize:!0},{property:"apiMethod",label:t.$tc("twint.order.transactionLog.list.columns.apiMethod"),allowResize:!0},{property:"soapAction",label:t.$tc("twint.order.transactionLog.list.columns.soapAction"),allowResize:!0},{property:"paymentStateId",label:t.$tc("twint.order.transactionLog.list.columns.payment"),allowResize:!0,sortable:!1},{property:"orderStateId",label:t.$tc("twint.order.transactionLog.list.columns.order"),allowResize:!0,align:"center"},{property:"createdAt",label:t.$tc("twint.order.transactionLog.list.columns.createdAt"),allowResize:!0}]:[]},dateFilter(){return Shopware.Filter.getByName("date")}}});let{Module:R}=Shopware;R.register("twint-sw-order-detail",{type:"plugin",name:"twint",title:"twint.name",description:"twint.pluginDescription",version:"1.0.0",targetVersion:"1.0.0",color:"#333",icon:"default-action-settings",routeMiddleware(t,e){"sw.order.detail"===e.name&&e.children.push({name:"sw.order.detail.twint",path:"/sw/order/detail/:id/twint",component:"sw-order-detail-twint",meta:{parentPath:"sw.order.index"}}),t(e)}})}()})();