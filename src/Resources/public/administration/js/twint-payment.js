(function(){var e={52:function(){},613:function(){let{Component:e,Mixin:t}=Shopware;e.extend("twint-merchant-id","sw-text-field",{mixins:[t.getByName("notification")],methods:{onChange(e){this.$super("onChange",e),this.isValidUUIDv4(e.target.value)||this.createNotificationError({title:this.$tc("twint.merchantErrorTitle"),message:this.$tc("twint.errors.invalidUUIDv4")})},isValidUUIDv4(e){return/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(e)}}})},905:function(e,t,i){var r=i(52);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[e.id,r,""]]),r.locals&&(e.exports=r.locals),i(346).Z("b343ab88",r,!0,{})},346:function(e,t,i){"use strict";function r(e,t){for(var i=[],r={},a=0;a<t.length;a++){var n=t[a],s=n[0],o={id:e+":"+a,css:n[1],media:n[2],sourceMap:n[3]};r[s]?r[s].parts.push(o):i.push(r[s]={id:s,parts:[o]})}return i}i.d(t,{Z:function(){return h}});var a="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!a)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var n={},s=a&&(document.head||document.getElementsByTagName("head")[0]),o=null,c=0,l=!1,d=function(){},f=null,p="data-vue-ssr-id",u="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function h(e,t,i,a){l=i,f=a||{};var s=r(e,t);return w(s),function(t){for(var i=[],a=0;a<s.length;a++){var o=n[s[a].id];o.refs--,i.push(o)}t?w(s=r(e,t)):s=[];for(var a=0;a<i.length;a++){var o=i[a];if(0===o.refs){for(var c=0;c<o.parts.length;c++)o.parts[c]();delete n[o.id]}}}}function w(e){for(var t=0;t<e.length;t++){var i=e[t],r=n[i.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](i.parts[a]);for(;a<i.parts.length;a++)r.parts.push(m(i.parts[a]));r.parts.length>i.parts.length&&(r.parts.length=i.parts.length)}else{for(var s=[],a=0;a<i.parts.length;a++)s.push(m(i.parts[a]));n[i.id]={id:i.id,refs:1,parts:s}}}}function v(){var e=document.createElement("style");return e.type="text/css",s.appendChild(e),e}function m(e){var t,i,r=document.querySelector("style["+p+'~="'+e.id+'"]');if(r){if(l)return d;r.parentNode.removeChild(r)}if(u){var a=c++;t=I.bind(null,r=o||(o=v()),a,!1),i=I.bind(null,r,a,!0)}else t=b.bind(null,r=v()),i=function(){r.parentNode.removeChild(r)};return t(e),function(r){r?(r.css!==e.css||r.media!==e.media||r.sourceMap!==e.sourceMap)&&t(e=r):i()}}var g=function(){var e=[];return function(t,i){return e[t]=i,e.filter(Boolean).join("\n")}}();function I(e,t,i,r){var a=i?"":r.css;if(e.styleSheet)e.styleSheet.cssText=g(t,a);else{var n=document.createTextNode(a),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(n,s[t]):e.appendChild(n)}}function b(e,t){var i=t.css,r=t.media,a=t.sourceMap;if(r&&e.setAttribute("media",r),f.ssrId&&e.setAttribute(p,t.id),a&&(i+="\n/*# sourceURL="+a.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}}},t={};function i(r){var a=t[r];if(void 0!==a)return a.exports;var n=t[r]={id:r,exports:{}};return e[r](n,n.exports,i),n.exports}i.d=function(e,t){for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="bundles/twintpayment/",window?.__sw__?.assetPath&&(i.p=window.__sw__.assetPath+"/bundles/twintpayment/"),function(){"use strict";var e=JSON.parse('{"twint":{"validation":{"errorTitle":"TWINT payment validation error","errorMessage":"There was an error validating the TWINT certificate (selected file and password). Please try again or use a different certification."},"certificateSuccess":"Certificate is an valid TWINT certificate.","certificateErrorTitle":"Certificate","merchantErrorTitle":"Merchant ID","certificateLabel":"Certificate Password (optional)","certificatePasswordHelpText":"The password for the certificate file is optional. If you have set a password for the certificate file, please enter it here.","certificateFileLabel":"Select a certificate file (.p12)","errors":{"INVALID_CREDENTIAL":"Invalid credentials. Please check your certificate and password.","INVALID_TIME_RANGE":"Invalid time range","INVALID_ISSUER":"Invalid Issuer; Only allow CH and TWINT AG"}}}'),t=JSON.parse('{"twint":{"validation":{"errorTitle":"TWINT configuration error","errorMessage":"There was an error validating the TWINT certificate (selected file and password). Please try again or use a different certification."},"certificateErrorTitle":"Certificate","merchantErrorTitle":"Merchant ID","certificateSuccess":"Certificate is an valid TWINT certificate.","certificateLabel":"Certificate Password (optional)","certificateFileLabel":"Select a certificate file (.p12)","certificatePasswordHelpText":"The password for the certificate file is optional. If you have set a password for the certificate file, please enter it here.","errors":{"INVALID_CREDENTIAL":"Invalid credentials. Please check your certificate and password.","INVALID_TIME_RANGE":"Invalid time range","INVALID_ISSUER":"Invalid Issuer; Only allow CH and TWINT AG","invalidUUIDv4":"Invalid UUIDv4"}}}');Shopware.Locale.extend("de-DE",e),Shopware.Locale.extend("en-GB",t);let r=Shopware.Classes.ApiService;class a extends r{constructor(e,t,i="twint"){super(e,t,i)}uploadFile(e,t){let i=this.getBasicHeaders();i["Content-Type"]="multipart/form-data";let r=new FormData;return r.append("file",e),r.append("password",t),this.httpClient.post("_actions/twint/extract-pem",r,{headers:i})}}let{Application:n}=Shopware;n.addServiceProvider("twintFileUploadService",()=>new a(Shopware.Application.getContainer("init").httpClient,Shopware.Service("loginService"))),i(905);let{Component:s,Mixin:o}=Shopware;s.register("twint-certificate",{template:Shopware.Feature.isActive("v6.6.0.0")?'{% block twint_certificate_block %}\n    <div>\n        <sw-file-input\n            v-model="currentCertFile"\n            :allowed-mime-types="[\'application/x-pkcs12\']"\n            :maxFileSize="8*1024*1024"\n            @update:value="onFileChange"\n            required\n        >\n            <template #caption-label>\n                {{ $tc(\'twint.certificateFileLabel\') }}\n            </template>\n        </sw-file-input>\n\n        <sw-password-field\n                v-model:value="currentPassword"\n                :entity-collection="null"\n                class="twint-config-field"\n                :label="$tc(\'twint.certificateLabel\')"\n                :help-text="$tc(\'twint.certificatePasswordHelpText\')"\n                @blur="updatePassword">\n            <template #suffix>\n                {% block twint_certificate_password_suffix_block %}\n                    <sw-icon name="regular-low-vision" size="22px"></sw-icon>\n                {% endblock %}\n            </template>\n        </sw-password-field>\n    </div>\n{% endblock %}\n':'{% block twint_certificate_block %}\n    <div>\n        <sw-file-input\n            v-model="currentCertFile"\n            :allowed-mime-types="[\'application/x-pkcs12\']"\n            :maxFileSize="8*1024*1024"\n            @change="onFileChange"\n            required\n        >\n            <template #caption-label>\n                {{ $tc(\'twint.certificateFileLabel\') }}\n            </template>\n        </sw-file-input>\n\n        <sw-password-field\n                v-model:value="currentPassword"\n                :entity-collection="null"\n                class="twint-config-field"\n                :label="$tc(\'twint.certificateLabel\')"\n                :help-text="$tc(\'twint.certificatePasswordHelpText\')"\n                @blur="updatePassword">\n            <template #suffix>\n                {% block twint_certificate_password_suffix_block %}\n                    <sw-icon name="regular-low-vision" size="22px"></sw-icon>\n                {% endblock %}\n            </template>\n        </sw-password-field>\n    </div>\n{% endblock %}\n',mixins:[o.getByName("notification")],inject:["feature"],data(){return{currentPassword:null,currentCertFile:null}},methods:{onFileChange(e){this.currentCertFile=e,this.extractPem()},updatePassword(e){this.extractPem()},extractPem(){let e=Shopware.Service("twintFileUploadService");this.currentCertFile&&e.uploadFile(this.currentCertFile,this.currentPassword??"").then(e=>{this.updateCertificate(e.data.data),this.createNotification({title:"Success",message:this.$tc("twint.certificateSuccess"),growl:!0}).then(e=>{})}).catch(e=>{if(400===e.response.status){let t=e.response.data.errorCode;return this.createNotificationError({title:this.$tc("twint.certificateErrorTitle"),message:this.$tc("twint.errors."+t),growl:!0})}this.createNotificationError({title:this.$tc("twint.certificateErrorTitle"),message:this.$tc("twint.validation.errorMessage"),growl:!0})})},updateCertificate(e){if(this.feature.isActive("v6.6.0.0")){this.$emit("update:value",e);return}this.$emit("input",e)}}}),i(613)}()})();