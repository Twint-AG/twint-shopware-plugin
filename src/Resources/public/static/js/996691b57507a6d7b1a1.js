"use strict";(window["webpackJsonpPlugintwint-payment"]=window["webpackJsonpPlugintwint-payment"]||[]).push([[863],{863:function(t,e,i){i.r(e),i.d(e,{default:function(){return n}});let{Mixin:s}=Shopware;var n={template:'{% block twint_payment %}\n    <sw-page class="twint-payment">\n        {% block twint_payment_header %}\n            <template #smart-bar-header>\n                <h2>\n                    {{ $tc(\'sw-settings.index.title\') }}\n                    <sw-icon name="regular-chevron-right-xs" small></sw-icon>\n                    {{ $tc(\'twint.general.menuItem\') }}\n                </h2>\n            </template>\n        {% endblock %}\n\n        {% block twint_payment_actions %}\n            <template #smart-bar-actions>\n                {% block twint_payment_settings_actions_save %}\n                    <sw-button-process\n                            class="sw-settings-login-registration__save-action"\n                            :isLoading="isLoading"\n                            :processSuccess="isSaveSuccessful"\n                            :disabled="isLoading || isTesting || isDisabled"\n                            variant="primary"\n                            @process-finish="saveFinish"\n                            @update-lock="updateLock"\n                            @click="onTest"\n                            >\n                        <span v-if="isTesting">\n                            {{ $tc(\'twint.settings.button.testing\') }}\n                        </span>\n                        <span v-if="!isTesting">\n                            {{ $tc(\'twint.settings.button.save\') }}\n                        </span>\n                    </sw-button-process>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block twint_payment_settings_content %}\n            <template #content>\n                <sw-card-view>\n                    <sw-system-config\n                            class="twint-config__wrapper"\n                            ref="systemConfig"\n                            sales-channel-switchable\n                            inherit\n                            domain="TwintPayment.settings"\n                            @config-changed="onChanged"\n                    >\n                    </sw-system-config>\n                </sw-card-view>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n',inject:["TwintPaymentSettingsService"],mixins:[s.getByName("notification"),s.getByName("sw-inline-snippet")],data(){return{isLoading:!1,isTesting:!1,isSaveSuccessful:!1,isTestSuccessful:!1,isDisabled:!1,validators:[]}},metaInfo(){return{title:this.$createTitle()}},created(){this.$root.$on("update-lock",this.updateLock),document.addEventListener("twint-add-validators",this.onAddValidator.bind(this))},methods:{onAddValidator(t){this.validators.push(t.detail)},onChanged(t){this.isTestSuccessful=!1,this.isSaveSuccessful=!1},saveFinish(){this.isSaveSuccessful=!1},getConfigValue(t){let e=this.$refs.systemConfig.actualConfigData,i=e.null,s=this.$refs.systemConfig.currentSalesChannelId;if(null===s)return e.null[`TwintPayment.settings.${t}`];let n=e[s][`TwintPayment.settings.${t}`];return null==n&&(n=i[`TwintPayment.settings.${t}`]),n},updateLock(t){this.isDisabled=t},onSave(){this.checkRequiredFields()&&(this.isSaveSuccessful=!1,this.isLoading=!0,this.$refs.systemConfig.saveAll().then(t=>{this.isSaveSuccessful=!0}).finally(()=>{this.isLoading=!1}))},isValidUUIDv4(t){return/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(t)},checkRequiredFields(){let t=!0,e=this.getConfigValue("storeUuid"),i=this.getConfigValue("certificate");if(e&&""!==e.trim()||(this.createNotificationError({title:this.$tc("twint.settings.storeUuid.error.title"),message:this.$tc("twint.settings.storeUuid.error.required")}),t=!1),t&&!this.isValidUUIDv4(e)&&(this.createNotificationError({title:this.$tc("twint.settings.storeUuid.error.title"),message:this.$tc("twint.settings.storeUuid.error.invalidFormat")}),t=!1),!i){let e=!0;for(let t=0;t<this.validators.length;++t){let i=this.validators[t],s=i.method(i.self);e=e&&s}t=t&&e,e&&(this.createNotificationError({title:this.$tc("twint.settings.certificate.error.title"),message:this.$tc("twint.settings.certificate.error.invalid")}),t=!1)}return t},onTest(){if(!this.checkRequiredFields())return;this.isTesting=!0,this.isTestSuccessful=!1;let t={};this.$refs.systemConfig.config.forEach(e=>{t={cert:this.getConfigValue("certificate"),storeUuid:this.getConfigValue("storeUuid"),testMode:this.getConfigValue("testMode")}}),this.TwintPaymentSettingsService.validateCredentials(t).then(t=>{t.success?(this.isTestSuccessful=!0,this.onSave()):this.createNotificationError({title:this.$tc("twint.settings.testCredentials.error.title"),message:this.$tc("twint.settings.testCredentials.error.message")})}).finally(t=>{this.isTesting=!1})}},destroyed(){this.$root.$off("update-lock")}}}}]);